
STM32F103C8T6_APDS9960.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b8  080054b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054b8  080054b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054b8  080054b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000074  0800553c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800553c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f04c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd5  00000000  00000000  0002f0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00030cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00031830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a10c  00000000  00000000  00032320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8db  00000000  00000000  0004c42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ade  00000000  00000000  00059d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e37e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000e3838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005268 	.word	0x08005268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005268 	.word	0x08005268

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN8APDS9960C1Ev>:
#include "APDS9960.h"

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;
////////////////////////////////////////////////////////////////////////////////
APDS9960::APDS9960()
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4a14      	ldr	r2, [pc, #80]	; (80001b8 <_ZN8APDS9960C1Ev+0x5c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	601a      	str	r2, [r3, #0]
{
	gesture_ud_delta_ = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	gesture_lr_delta_ = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	gesture_ud_count_ = 0;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	gesture_lr_count_ = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	gesture_near_count_ = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	gesture_far_count_ = 0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	gesture_state_ = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	gesture_motion_ = DIR_NONE;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2200      	movs	r2, #0
 80001a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4618      	mov	r0, r3
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	08005450 	.word	0x08005450

080001bc <_ZN8APDS9960D1Ev>:
////////////////////////////////////////////////////////////////////////////////
APDS9960::~APDS9960()
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <_ZN8APDS9960D1Ev+0x1c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	601a      	str	r2, [r3, #0]
{

}
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4618      	mov	r0, r3
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	08005450 	.word	0x08005450

080001dc <_ZN8APDS9960D0Ev>:
APDS9960::~APDS9960()
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
}
 80001e4:	6878      	ldr	r0, [r7, #4]
 80001e6:	f7ff ffe9 	bl	80001bc <_ZN8APDS9960D1Ev>
 80001ea:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f004 fb82 	bl	80048f8 <_ZdlPvj>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <_ZN8APDS99604initEv>:
////////////////////////////////////////////////////////////////////////////////
bool APDS9960::init()
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b084      	sub	sp, #16
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]

	/* Initialize I2C */
	//I2C Initialized in main.cpp -> (extern I2C_HandleTypeDef hi2c1)

	/* Read ID register and check against known values for APDS-9960 */
	if( !APDS_9960_Read(APDS9960_ID, id) )
 8000206:	f107 030f 	add.w	r3, r7, #15
 800020a:	461a      	mov	r2, r3
 800020c:	2192      	movs	r1, #146	; 0x92
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f001 f97a 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 8000214:	4603      	mov	r3, r0
 8000216:	f083 0301 	eor.w	r3, r3, #1
 800021a:	b2db      	uxtb	r3, r3
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <_ZN8APDS99604initEv+0x26>
	{
		return false;
 8000220:	2300      	movs	r3, #0
 8000222:	e182      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !(id == APDS9960_ID_1 || id == APDS9960_ID_2) )
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	2bab      	cmp	r3, #171	; 0xab
 8000228:	d004      	beq.n	8000234 <_ZN8APDS99604initEv+0x36>
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b9c      	cmp	r3, #156	; 0x9c
 800022e:	d001      	beq.n	8000234 <_ZN8APDS99604initEv+0x36>
	{
		return false;
 8000230:	2300      	movs	r3, #0
 8000232:	e17a      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	/* Set ENABLE register to 0 (disable all features) */
	if( !setMode(ALL, OFF) )
 8000234:	2200      	movs	r2, #0
 8000236:	2107      	movs	r1, #7
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f992 	bl	8000562 <_ZN8APDS99607setModeEhh>
 800023e:	4603      	mov	r3, r0
 8000240:	f083 0301 	eor.w	r3, r3, #1
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <_ZN8APDS99604initEv+0x50>
	{
		return false;
 800024a:	2300      	movs	r3, #0
 800024c:	e16d      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	/* Set default values for ambient light and proximity registers */
	if( !APDS_9960_Write(APDS9960_ATIME, DEFAULT_ATIME) )
 800024e:	22db      	movs	r2, #219	; 0xdb
 8000250:	2181      	movs	r1, #129	; 0x81
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f001 f932 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000258:	4603      	mov	r3, r0
 800025a:	f083 0301 	eor.w	r3, r3, #1
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <_ZN8APDS99604initEv+0x6a>
	{
		return false;
 8000264:	2300      	movs	r3, #0
 8000266:	e160      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_WTIME, DEFAULT_WTIME) )
 8000268:	22f6      	movs	r2, #246	; 0xf6
 800026a:	2183      	movs	r1, #131	; 0x83
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f001 f925 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000272:	4603      	mov	r3, r0
 8000274:	f083 0301 	eor.w	r3, r3, #1
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <_ZN8APDS99604initEv+0x84>
	{
		return false;
 800027e:	2300      	movs	r3, #0
 8000280:	e153      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_PPULSE, DEFAULT_PROX_PPULSE) )
 8000282:	2287      	movs	r2, #135	; 0x87
 8000284:	218e      	movs	r1, #142	; 0x8e
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f001 f918 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800028c:	4603      	mov	r3, r0
 800028e:	f083 0301 	eor.w	r3, r3, #1
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <_ZN8APDS99604initEv+0x9e>
	{
		return false;
 8000298:	2300      	movs	r3, #0
 800029a:	e146      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR) )
 800029c:	2200      	movs	r2, #0
 800029e:	219d      	movs	r1, #157	; 0x9d
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f001 f90b 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80002a6:	4603      	mov	r3, r0
 80002a8:	f083 0301 	eor.w	r3, r3, #1
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <_ZN8APDS99604initEv+0xb8>
	{
		return false;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e139      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL) )
 80002b6:	2200      	movs	r2, #0
 80002b8:	219e      	movs	r1, #158	; 0x9e
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f001 f8fe 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f083 0301 	eor.w	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <_ZN8APDS99604initEv+0xd2>
	{
		return false;
 80002cc:	2300      	movs	r3, #0
 80002ce:	e12c      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_CONFIG1, DEFAULT_CONFIG1) )
 80002d0:	2260      	movs	r2, #96	; 0x60
 80002d2:	218d      	movs	r1, #141	; 0x8d
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f001 f8f1 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80002da:	4603      	mov	r3, r0
 80002dc:	f083 0301 	eor.w	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <_ZN8APDS99604initEv+0xec>
	{
		return false;
 80002e6:	2300      	movs	r3, #0
 80002e8:	e11f      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setLEDDrive(DEFAULT_LDRIVE) )
 80002ea:	2100      	movs	r1, #0
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 fe5f 	bl	8000fb0 <_ZN8APDS996011setLEDDriveEh>
 80002f2:	4603      	mov	r3, r0
 80002f4:	f083 0301 	eor.w	r3, r3, #1
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <_ZN8APDS99604initEv+0x104>
	{
		return false;
 80002fe:	2300      	movs	r3, #0
 8000300:	e113      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setProximityGain(DEFAULT_PGAIN) )
 8000302:	2102      	movs	r1, #2
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 fe8c 	bl	8001022 <_ZN8APDS996016setProximityGainEh>
 800030a:	4603      	mov	r3, r0
 800030c:	f083 0301 	eor.w	r3, r3, #1
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <_ZN8APDS99604initEv+0x11c>
	{
		return false;
 8000316:	2300      	movs	r3, #0
 8000318:	e107      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setAmbientLightGain(DEFAULT_AGAIN) )
 800031a:	2101      	movs	r1, #1
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 feba 	bl	8001096 <_ZN8APDS996019setAmbientLightGainEh>
 8000322:	4603      	mov	r3, r0
 8000324:	f083 0301 	eor.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <_ZN8APDS99604initEv+0x134>
	{
		return false;
 800032e:	2300      	movs	r3, #0
 8000330:	e0fb      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setProxIntLowThresh(DEFAULT_PILT) )
 8000332:	2100      	movs	r1, #0
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 fe09 	bl	8000f4c <_ZN8APDS996019setProxIntLowThreshEh>
 800033a:	4603      	mov	r3, r0
 800033c:	f083 0301 	eor.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <_ZN8APDS99604initEv+0x14c>
	{
		return false;
 8000346:	2300      	movs	r3, #0
 8000348:	e0ef      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setProxIntHighThresh(DEFAULT_PIHT) )
 800034a:	2132      	movs	r1, #50	; 0x32
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f000 fe16 	bl	8000f7e <_ZN8APDS996020setProxIntHighThreshEh>
 8000352:	4603      	mov	r3, r0
 8000354:	f083 0301 	eor.w	r3, r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <_ZN8APDS99604initEv+0x164>
	{
		return false;
 800035e:	2300      	movs	r3, #0
 8000360:	e0e3      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setLightIntLowThreshold(DEFAULT_AILT) )
 8000362:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 ffde 	bl	8001328 <_ZN8APDS996023setLightIntLowThresholdEt>
 800036c:	4603      	mov	r3, r0
 800036e:	f083 0301 	eor.w	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <_ZN8APDS99604initEv+0x17e>
	{
		return false;
 8000378:	2300      	movs	r3, #0
 800037a:	e0d6      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setLightIntHighThreshold(DEFAULT_AIHT) )
 800037c:	2100      	movs	r1, #0
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 ffff 	bl	8001382 <_ZN8APDS996024setLightIntHighThresholdEt>
 8000384:	4603      	mov	r3, r0
 8000386:	f083 0301 	eor.w	r3, r3, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <_ZN8APDS99604initEv+0x196>
	{
		return false;
 8000390:	2300      	movs	r3, #0
 8000392:	e0ca      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_PERS, DEFAULT_PERS) )
 8000394:	2211      	movs	r2, #17
 8000396:	218c      	movs	r1, #140	; 0x8c
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f001 f88f 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800039e:	4603      	mov	r3, r0
 80003a0:	f083 0301 	eor.w	r3, r3, #1
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <_ZN8APDS99604initEv+0x1b0>
	{
		return false;
 80003aa:	2300      	movs	r3, #0
 80003ac:	e0bd      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_CONFIG2, DEFAULT_CONFIG2) )
 80003ae:	2201      	movs	r2, #1
 80003b0:	2190      	movs	r1, #144	; 0x90
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f001 f882 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80003b8:	4603      	mov	r3, r0
 80003ba:	f083 0301 	eor.w	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <_ZN8APDS99604initEv+0x1ca>
	{
		return false;
 80003c4:	2300      	movs	r3, #0
 80003c6:	e0b0      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_CONFIG3, DEFAULT_CONFIG3) )
 80003c8:	2200      	movs	r2, #0
 80003ca:	219f      	movs	r1, #159	; 0x9f
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f001 f875 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <_ZN8APDS99604initEv+0x1e4>
	{
		return false;
 80003de:	2300      	movs	r3, #0
 80003e0:	e0a3      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	/* Set default values for gesture sense registers */
	if( !setGestureEnterThresh(DEFAULT_GPENTH) )
 80003e2:	2128      	movs	r1, #40	; 0x28
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 fec5 	bl	8001174 <_ZN8APDS996021setGestureEnterThreshEh>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f083 0301 	eor.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <_ZN8APDS99604initEv+0x1fc>
	{
		return false;
 80003f6:	2300      	movs	r3, #0
 80003f8:	e097      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setGestureExitThresh(DEFAULT_GEXTH) )
 80003fa:	211e      	movs	r1, #30
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 fed2 	bl	80011a6 <_ZN8APDS996020setGestureExitThreshEh>
 8000402:	4603      	mov	r3, r0
 8000404:	f083 0301 	eor.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <_ZN8APDS99604initEv+0x214>
	{
		return false;
 800040e:	2300      	movs	r3, #0
 8000410:	e08b      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GCONF1, DEFAULT_GCONF1) )
 8000412:	2240      	movs	r2, #64	; 0x40
 8000414:	21a2      	movs	r1, #162	; 0xa2
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f001 f850 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800041c:	4603      	mov	r3, r0
 800041e:	f083 0301 	eor.w	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <_ZN8APDS99604initEv+0x22e>
	{
		return false;
 8000428:	2300      	movs	r3, #0
 800042a:	e07e      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setGestureGain(GGAIN_1X) ) {//DEFAULT_GGAIN disminuir sensibilidad y omitir gestos imprecisos
 800042c:	2100      	movs	r1, #0
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 fed2 	bl	80011d8 <_ZN8APDS996014setGestureGainEh>
 8000434:	4603      	mov	r3, r0
 8000436:	f083 0301 	eor.w	r3, r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <_ZN8APDS99604initEv+0x246>
		return false;
 8000440:	2300      	movs	r3, #0
 8000442:	e072      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setGestureLEDDrive(DEFAULT_GLDRIVE) )
 8000444:	2100      	movs	r1, #0
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 feff 	bl	800124a <_ZN8APDS996018setGestureLEDDriveEh>
 800044c:	4603      	mov	r3, r0
 800044e:	f083 0301 	eor.w	r3, r3, #1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <_ZN8APDS99604initEv+0x25e>
	{
		return false;
 8000458:	2300      	movs	r3, #0
 800045a:	e066      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setGestureWaitTime(DEFAULT_GWTIME) )
 800045c:	2101      	movs	r1, #1
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 ff2c 	bl	80012bc <_ZN8APDS996018setGestureWaitTimeEh>
 8000464:	4603      	mov	r3, r0
 8000466:	f083 0301 	eor.w	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <_ZN8APDS99604initEv+0x276>
	{
		return false;
 8000470:	2300      	movs	r3, #0
 8000472:	e05a      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GOFFSET_U, DEFAULT_GOFFSET) )
 8000474:	2200      	movs	r2, #0
 8000476:	21a4      	movs	r1, #164	; 0xa4
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f001 f81f 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800047e:	4603      	mov	r3, r0
 8000480:	f083 0301 	eor.w	r3, r3, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <_ZN8APDS99604initEv+0x290>
	{
		return false;
 800048a:	2300      	movs	r3, #0
 800048c:	e04d      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GOFFSET_D, DEFAULT_GOFFSET) )
 800048e:	2200      	movs	r2, #0
 8000490:	21a5      	movs	r1, #165	; 0xa5
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f001 f812 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000498:	4603      	mov	r3, r0
 800049a:	f083 0301 	eor.w	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <_ZN8APDS99604initEv+0x2aa>
	{
		return false;
 80004a4:	2300      	movs	r3, #0
 80004a6:	e040      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GOFFSET_L, DEFAULT_GOFFSET) )
 80004a8:	2200      	movs	r2, #0
 80004aa:	21a7      	movs	r1, #167	; 0xa7
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f001 f805 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80004b2:	4603      	mov	r3, r0
 80004b4:	f083 0301 	eor.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <_ZN8APDS99604initEv+0x2c4>
	{
		return false;
 80004be:	2300      	movs	r3, #0
 80004c0:	e033      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GOFFSET_R, DEFAULT_GOFFSET) )
 80004c2:	2200      	movs	r2, #0
 80004c4:	21a9      	movs	r1, #169	; 0xa9
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f000 fff8 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80004cc:	4603      	mov	r3, r0
 80004ce:	f083 0301 	eor.w	r3, r3, #1
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <_ZN8APDS99604initEv+0x2de>
	{
		return false;
 80004d8:	2300      	movs	r3, #0
 80004da:	e026      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GPULSE, DEFAULT_GPULSE) )
 80004dc:	22c9      	movs	r2, #201	; 0xc9
 80004de:	21a6      	movs	r1, #166	; 0xa6
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f000 ffeb 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80004e6:	4603      	mov	r3, r0
 80004e8:	f083 0301 	eor.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <_ZN8APDS99604initEv+0x2f8>
	{
		return false;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e019      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !APDS_9960_Write(APDS9960_GCONF3, DEFAULT_GCONF3) )
 80004f6:	2200      	movs	r2, #0
 80004f8:	21aa      	movs	r1, #170	; 0xaa
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 ffde 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000500:	4603      	mov	r3, r0
 8000502:	f083 0301 	eor.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <_ZN8APDS99604initEv+0x312>
	{
		return false;
 800050c:	2300      	movs	r3, #0
 800050e:	e00c      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
	}

	if( !setGestureIntEnable(DEFAULT_GIEN) )
 8000510:	2100      	movs	r1, #0
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f000 ff62 	bl	80013dc <_ZN8APDS996019setGestureIntEnableEh>
 8000518:	4603      	mov	r3, r0
 800051a:	f083 0301 	eor.w	r3, r3, #1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <_ZN8APDS99604initEv+0x32a>
	{
		return false;
 8000524:	2300      	movs	r3, #0
 8000526:	e000      	b.n	800052a <_ZN8APDS99604initEv+0x32c>
		sprintf((char*)msg,"\n Reg 0x%X: 0x%X",reg,val);
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}
#endif

	return true;
 8000528:	2301      	movs	r3, #1
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_ZN8APDS99607getModeEv>:
/*
 * @brief Reads and returns the contents of the ENABLE register
 * @return Contents of the ENABLE register. 0xFF if error.
 */
uint8_t APDS9960::getMode()
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b084      	sub	sp, #16
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
	uint8_t enable_value;

	/* Read current ENABLE register */
	if( !APDS_9960_Read(APDS9960_ENABLE, enable_value) )
 800053a:	f107 030f 	add.w	r3, r7, #15
 800053e:	461a      	mov	r2, r3
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 ffe0 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 8000548:	4603      	mov	r3, r0
 800054a:	f083 0301 	eor.w	r3, r3, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <_ZN8APDS99607getModeEv+0x26>
	{
		return ERROR;
 8000554:	23ff      	movs	r3, #255	; 0xff
 8000556:	e000      	b.n	800055a <_ZN8APDS99607getModeEv+0x28>
	}

	return enable_value;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_ZN8APDS99607setModeEhh>:
 * @param[in] mode which feature to enable
 * @param[in] enable ON (1) or OFF (0)
 * @return True if operation success. False otherwise.
 */
bool APDS9960::setMode(uint8_t mode, uint8_t enable)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	70fb      	strb	r3, [r7, #3]
 800056e:	4613      	mov	r3, r2
 8000570:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val;

	/* Read current ENABLE register */
	reg_val = getMode();
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ffdd 	bl	8000532 <_ZN8APDS99607getModeEv>
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]
	if( reg_val == ERROR )
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2bff      	cmp	r3, #255	; 0xff
 8000580:	d101      	bne.n	8000586 <_ZN8APDS99607setModeEhh+0x24>
	{
		return false;
 8000582:	2300      	movs	r3, #0
 8000584:	e03b      	b.n	80005fe <_ZN8APDS99607setModeEhh+0x9c>
	}

	/* Change bit(s) in ENABLE register */
	enable = enable & 0x01;
 8000586:	78bb      	ldrb	r3, [r7, #2]
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	70bb      	strb	r3, [r7, #2]
	if( mode >= 0 && mode <= 6 )
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	2b06      	cmp	r3, #6
 8000592:	d81a      	bhi.n	80005ca <_ZN8APDS99607setModeEhh+0x68>
	{
		if (enable)
 8000594:	78bb      	ldrb	r3, [r7, #2]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00a      	beq.n	80005b0 <_ZN8APDS99607setModeEhh+0x4e>
		{
			reg_val |= (1 << mode);
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2201      	movs	r2, #1
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e017      	b.n	80005e0 <_ZN8APDS99607setModeEhh+0x7e>
		}
		else
		{
			reg_val &= ~(1 << mode);
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2201      	movs	r2, #1
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005c2:	4013      	ands	r3, r2
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e00a      	b.n	80005e0 <_ZN8APDS99607setModeEhh+0x7e>
		}
	}
	else if( mode == ALL )
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	2b07      	cmp	r3, #7
 80005ce:	d107      	bne.n	80005e0 <_ZN8APDS99607setModeEhh+0x7e>
	{
		if (enable)
 80005d0:	78bb      	ldrb	r3, [r7, #2]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <_ZN8APDS99607setModeEhh+0x7a>
		{
			reg_val = 0x7F;
 80005d6:	237f      	movs	r3, #127	; 0x7f
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	e001      	b.n	80005e0 <_ZN8APDS99607setModeEhh+0x7e>
		}
		else
		{
			reg_val = 0x00;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
		}
	}

	/* Write value back to ENABLE register */
	if( !APDS_9960_Write(APDS9960_ENABLE, reg_val) )
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	461a      	mov	r2, r3
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 ff68 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f083 0301 	eor.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <_ZN8APDS99607setModeEhh+0x9a>
	{
		return false;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e000      	b.n	80005fe <_ZN8APDS99607setModeEhh+0x9c>
	}

	return true;
 80005fc:	2301      	movs	r3, #1
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <_ZN8APDS996019enableGestureSensorEb>:
 * @brief Starts the gesture recognition engine on the APDS-9960
 * @param[in] interrupts true to enable hardware external interrupt on gesture
 * @return True if engine enabled correctly. False on error.
 */
bool APDS9960::enableGestureSensor(bool interrupts)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	460b      	mov	r3, r1
 8000610:	70fb      	strb	r3, [r7, #3]
       Set ENABLE to 0 (power off)
       Set WTIME to 0xFF
       Set AUX to LED_BOOST_300
       Enable PON, WEN, PEN, GEN in ENABLE
	 */
	resetGestureParameters();
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f999 	bl	800094a <_ZN8APDS996022resetGestureParametersEv>

	if( !APDS_9960_Write(APDS9960_WTIME, 0xFF) )
 8000618:	22ff      	movs	r2, #255	; 0xff
 800061a:	2183      	movs	r1, #131	; 0x83
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 ff4d 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000622:	4603      	mov	r3, r0
 8000624:	f083 0301 	eor.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_ZN8APDS996019enableGestureSensorEb+0x2c>
	{
		return false;
 800062e:	2300      	movs	r3, #0
 8000630:	e072      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( !APDS_9960_Write(APDS9960_PPULSE, DEFAULT_GESTURE_PPULSE) )
 8000632:	2289      	movs	r2, #137	; 0x89
 8000634:	218e      	movs	r1, #142	; 0x8e
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 ff40 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800063c:	4603      	mov	r3, r0
 800063e:	f083 0301 	eor.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_ZN8APDS996019enableGestureSensorEb+0x46>
	{
		return false;
 8000648:	2300      	movs	r3, #0
 800064a:	e065      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( !setLEDBoost(LED_BOOST_300) )
 800064c:	2103      	movs	r1, #3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fd57 	bl	8001102 <_ZN8APDS996011setLEDBoostEh>
 8000654:	4603      	mov	r3, r0
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <_ZN8APDS996019enableGestureSensorEb+0x5e>
	{
		return false;
 8000660:	2300      	movs	r3, #0
 8000662:	e059      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( interrupts ) {
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00b      	beq.n	8000682 <_ZN8APDS996019enableGestureSensorEb+0x7c>
		if( !setGestureIntEnable(1) )
 800066a:	2101      	movs	r1, #1
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 feb5 	bl	80013dc <_ZN8APDS996019setGestureIntEnableEh>
 8000672:	4603      	mov	r3, r0
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00d      	beq.n	800069a <_ZN8APDS996019enableGestureSensorEb+0x94>
		{
			return false;
 800067e:	2300      	movs	r3, #0
 8000680:	e04a      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
		}
	}
	else
	{
		if( !setGestureIntEnable(0) )
 8000682:	2100      	movs	r1, #0
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 fea9 	bl	80013dc <_ZN8APDS996019setGestureIntEnableEh>
 800068a:	4603      	mov	r3, r0
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <_ZN8APDS996019enableGestureSensorEb+0x94>
		{
			return false;
 8000696:	2300      	movs	r3, #0
 8000698:	e03e      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
		}
	}

	if( !setGestureMode(1) )
 800069a:	2101      	movs	r1, #1
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 fed6 	bl	800144e <_ZN8APDS996014setGestureModeEh>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f083 0301 	eor.w	r3, r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <_ZN8APDS996019enableGestureSensorEb+0xac>
	{
		return false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e032      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( !enablePower() )
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f933 	bl	800091e <_ZN8APDS996011enablePowerEv>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f083 0301 	eor.w	r3, r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <_ZN8APDS996019enableGestureSensorEb+0xc2>
	{
		return false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e027      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( !setMode(WAIT, 1) )
 80006c8:	2201      	movs	r2, #1
 80006ca:	2103      	movs	r1, #3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff48 	bl	8000562 <_ZN8APDS99607setModeEhh>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <_ZN8APDS996019enableGestureSensorEb+0xdc>
	{
		return false;
 80006de:	2300      	movs	r3, #0
 80006e0:	e01a      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( !setMode(PROXIMITY, 1) )
 80006e2:	2201      	movs	r2, #1
 80006e4:	2102      	movs	r1, #2
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff3b 	bl	8000562 <_ZN8APDS99607setModeEhh>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f083 0301 	eor.w	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <_ZN8APDS996019enableGestureSensorEb+0xf6>
	{
		return false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e00d      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	if( !setMode(GESTURE, 1) )
 80006fc:	2201      	movs	r2, #1
 80006fe:	2106      	movs	r1, #6
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff2e 	bl	8000562 <_ZN8APDS99607setModeEhh>
 8000706:	4603      	mov	r3, r0
 8000708:	f083 0301 	eor.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <_ZN8APDS996019enableGestureSensorEb+0x110>
	{
		return false;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <_ZN8APDS996019enableGestureSensorEb+0x112>
	}

	return true;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <_ZN8APDS996018isGestureAvailableEv>:
/*
 * @brief Determines if there is a gesture available for reading
 * @return True if gesture available. False otherwise.
 */
bool APDS9960::isGestureAvailable()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	uint8_t val;

	/* Read value from GSTATUS register */
	if( !APDS_9960_Read(APDS9960_GSTATUS, val) )
 8000728:	f107 030f 	add.w	r3, r7, #15
 800072c:	461a      	mov	r2, r3
 800072e:	21af      	movs	r1, #175	; 0xaf
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fee9 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 8000736:	4603      	mov	r3, r0
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <_ZN8APDS996018isGestureAvailableEv+0x26>
	{
		return ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00a      	b.n	800075c <_ZN8APDS996018isGestureAvailableEv+0x3c>
	}

	/* Shift and mask out GVALID bit */
	val &= APDS9960_GVALID;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	73fb      	strb	r3, [r7, #15]

	/* Return true/false based on GVALID bit */
	if( val == 1)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d101      	bne.n	800075a <_ZN8APDS996018isGestureAvailableEv+0x3a>
	{
		return true;
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <_ZN8APDS996018isGestureAvailableEv+0x3c>
	}
	else
	{
		return false;
 800075a:	2300      	movs	r3, #0
	}
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZN8APDS996011readGestureEv>:
/*
 * @brief Processes a gesture event and returns best guessed gesture
 * @return Number corresponding to gesture. -1 on error.
 */
int APDS9960::readGesture()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0a8      	sub	sp, #160	; 0xa0
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	uint8_t fifo_level = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	uint8_t bytes_read = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	int motion;
	int i;

	/* Make sure that power and gesture is on and data is valid */
	if( !isGestureAvailable() || !(getMode() & 0b01000001) )
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffd1 	bl	8000720 <_ZN8APDS996018isGestureAvailableEv>
 800077e:	4603      	mov	r3, r0
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d107      	bne.n	800079a <_ZN8APDS996011readGestureEv+0x36>
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fed1 	bl	8000532 <_ZN8APDS99607getModeEv>
 8000790:	4603      	mov	r3, r0
 8000792:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <_ZN8APDS996011readGestureEv+0x3a>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <_ZN8APDS996011readGestureEv+0x3c>
 800079e:	2300      	movs	r3, #0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <_ZN8APDS996011readGestureEv+0x44>
	{
		return DIR_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e0b6      	b.n	8000916 <_ZN8APDS996011readGestureEv+0x1b2>

	/* Keep looping as long as gesture data is valid */
	while(1)
	{
		/* Wait some time to collect next batch of FIFO data */
		HAL_Delay(FIFO_PAUSE_TIME);
 80007a8:	201e      	movs	r0, #30
 80007aa:	f001 fca3 	bl	80020f4 <HAL_Delay>

		/* Get the contents of the STATUS register. Is data still valid? */
		if( !APDS_9960_Read(APDS9960_GSTATUS, gstatus) )
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	461a      	mov	r2, r3
 80007b4:	21af      	movs	r1, #175	; 0xaf
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 fea6 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 80007bc:	4603      	mov	r3, r0
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZN8APDS996011readGestureEv+0x68>
		{
			return ERROR;
 80007c8:	23ff      	movs	r3, #255	; 0xff
 80007ca:	e0a4      	b.n	8000916 <_ZN8APDS996011readGestureEv+0x1b2>
		}

		/* If we have valid data, read in FIFO */
		if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID )
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 808f 	beq.w	80008f6 <_ZN8APDS996011readGestureEv+0x192>
		{

			/* Read the current FIFO level */
			if( !APDS_9960_Read(APDS9960_GFLVL, fifo_level) )
 80007d8:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80007dc:	461a      	mov	r2, r3
 80007de:	21ae      	movs	r1, #174	; 0xae
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 fe91 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <_ZN8APDS996011readGestureEv+0x92>
			{
				return ERROR;
 80007f2:	23ff      	movs	r3, #255	; 0xff
 80007f4:	e08f      	b.n	8000916 <_ZN8APDS996011readGestureEv+0x1b2>
			sprintf((char*)msg,"\n FIFO Level: %d ",fifo_level);
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
#endif

			/* If there's stuff in the FIFO, read it into our data block */
			if( fifo_level > 0)
 80007f6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00b      	beq.n	8000816 <_ZN8APDS996011readGestureEv+0xb2>
			{
				bytes_read = APDS_9960_Read_Block(  APDS9960_GFIFO_U,(uint8_t*)fifo_data,(fifo_level * 4) );
 80007fe:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	f107 0210 	add.w	r2, r7, #16
 8000808:	21fc      	movs	r1, #252	; 0xfc
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 feb0 	bl	8001570 <_ZN8APDS996020APDS_9960_Read_BlockEhPhj>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
			}
#endif

			/* If at least 1 set of data, sort the data into U/D/L/R */
			if( bytes_read >= 4 )
 8000816:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800081a:	2b03      	cmp	r3, #3
 800081c:	d9c4      	bls.n	80007a8 <_ZN8APDS996011readGestureEv+0x44>
			{
				for( i = 0; i < bytes_read; i += 4 )
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000824:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000828:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800082c:	429a      	cmp	r2, r3
 800082e:	da50      	bge.n	80008d2 <_ZN8APDS996011readGestureEv+0x16e>
				{
					gesture_data_.u_data[gesture_data_.index] = \
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000836:	4619      	mov	r1, r3
							fifo_data[i + 0];
 8000838:	f107 0210 	add.w	r2, r7, #16
 800083c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000840:	4413      	add	r3, r2
 8000842:	781a      	ldrb	r2, [r3, #0]
					gesture_data_.u_data[gesture_data_.index] = \
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	440b      	add	r3, r1
 8000848:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
					gesture_data_.d_data[gesture_data_.index] = \
							fifo_data[i + 1];
 800084c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000850:	3301      	adds	r3, #1
					gesture_data_.d_data[gesture_data_.index] = \
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
 8000858:	4611      	mov	r1, r2
							fifo_data[i + 1];
 800085a:	33a0      	adds	r3, #160	; 0xa0
 800085c:	443b      	add	r3, r7
 800085e:	f813 2c90 	ldrb.w	r2, [r3, #-144]
					gesture_data_.d_data[gesture_data_.index] = \
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	440b      	add	r3, r1
 8000866:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					gesture_data_.l_data[gesture_data_.index] = \
							fifo_data[i + 2];
 800086a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800086e:	3302      	adds	r3, #2
					gesture_data_.l_data[gesture_data_.index] = \
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
 8000876:	4611      	mov	r1, r2
							fifo_data[i + 2];
 8000878:	33a0      	adds	r3, #160	; 0xa0
 800087a:	443b      	add	r3, r7
 800087c:	f813 2c90 	ldrb.w	r2, [r3, #-144]
					gesture_data_.l_data[gesture_data_.index] = \
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	440b      	add	r3, r1
 8000884:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
					gesture_data_.r_data[gesture_data_.index] = \
							fifo_data[i + 3];
 8000888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800088c:	3303      	adds	r3, #3
					gesture_data_.r_data[gesture_data_.index] = \
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
 8000894:	4611      	mov	r1, r2
							fifo_data[i + 3];
 8000896:	33a0      	adds	r3, #160	; 0xa0
 8000898:	443b      	add	r3, r7
 800089a:	f813 2c90 	ldrb.w	r2, [r3, #-144]
					gesture_data_.r_data[gesture_data_.index] = \
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	440b      	add	r3, r1
 80008a2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
					gesture_data_.index++;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
					gesture_data_.total_gestures++;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				for( i = 0; i < bytes_read; i += 4 )
 80008c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008ca:	3304      	adds	r3, #4
 80008cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80008d0:	e7a8      	b.n	8000824 <_ZN8APDS996011readGestureEv+0xc0>
					HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
				}
#endif

				/* Filter and process gesture data. Decode near/far state */
				if( processGestureData() )
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f86a 	bl	80009ac <_ZN8APDS996018processGestureDataEv>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <_ZN8APDS996011readGestureEv+0x180>
				{
					if( decodeGesture() )
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 fa44 	bl	8000d6c <_ZN8APDS996013decodeGestureEv>
						//***TODO: U-Turn Gestures
					}
				}

/* Reset data */
gesture_data_.index = 0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
gesture_data_.total_gestures = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 80008f4:	e758      	b.n	80007a8 <_ZN8APDS996011readGestureEv+0x44>
		}
		else
		{

			/* Determine best guessed gesture and clean up */
			HAL_Delay(FIFO_PAUSE_TIME);
 80008f6:	201e      	movs	r0, #30
 80008f8:	f001 fbfc 	bl	80020f4 <HAL_Delay>
			decodeGesture();
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 fa35 	bl	8000d6c <_ZN8APDS996013decodeGestureEv>
			motion = gesture_motion_;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sprintf((char*)msg,"\n END:");
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
			sprintf((char*)msg," %d: ",gesture_motion_);
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
#endif
			resetGestureParameters();
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 f81c 	bl	800094a <_ZN8APDS996022resetGestureParametersEv>
			return motion;
 8000912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
		}
	}
}
 8000916:	4618      	mov	r0, r3
 8000918:	37a0      	adds	r7, #160	; 0xa0
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_ZN8APDS996011enablePowerEv>:
/*
 * Turn the APDS-9960 on
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::enablePower()
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	if( !setMode(POWER, 1) )
 8000926:	2201      	movs	r2, #1
 8000928:	2100      	movs	r1, #0
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fe19 	bl	8000562 <_ZN8APDS99607setModeEhh>
 8000930:	4603      	mov	r3, r0
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <_ZN8APDS996011enablePowerEv+0x22>
	{
		return false;
 800093c:	2300      	movs	r3, #0
 800093e:	e000      	b.n	8000942 <_ZN8APDS996011enablePowerEv+0x24>
	}

	return true;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_ZN8APDS996022resetGestureParametersEv>:
////////////////////////////////////////////////////////////////////////////////
/*
 * @brief Resets all the parameters in the gesture data member
 */
void APDS9960::resetGestureParameters()
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	gesture_data_.index = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	gesture_data_.total_gestures = 0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9

	gesture_ud_delta_ = 0;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	gesture_lr_delta_ = 0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	gesture_ud_count_ = 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	gesture_lr_count_ = 0;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	gesture_near_count_ = 0;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	gesture_far_count_ = 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	gesture_state_ = 0;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	gesture_motion_ = DIR_NONE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <_ZN8APDS996018processGestureDataEv>:
/**
 * @brief Processes the raw gesture data to determine swipe direction
 * @return True if near or far state seen. False otherwise.
 */
bool APDS9960::processGestureData()
{
 80009ac:	b480      	push	{r7}
 80009ae:	b08d      	sub	sp, #52	; 0x34
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	uint8_t u_first = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t d_first = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t l_first = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t r_first = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t u_last = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t d_last = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t l_last = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t r_last = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	int ud_delta;
	int lr_delta;
	int i;

	/* If we have less than 4 total gestures, that's not enough */
	if( gesture_data_.total_gestures <= 4 )
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d801      	bhi.n	80009f2 <_ZN8APDS996018processGestureDataEv+0x46>
	{
		return false;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e1b7      	b.n	8000d62 <_ZN8APDS996018processGestureDataEv+0x3b6>
	}

	/* Check to make sure our data isn't out of bounds */
	if( (gesture_data_.total_gestures <= 32) && \
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80009f8:	2b20      	cmp	r3, #32
 80009fa:	f200 80a3 	bhi.w	8000b44 <_ZN8APDS996018processGestureDataEv+0x198>
			(gesture_data_.total_gestures > 0) )
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
	if( (gesture_data_.total_gestures <= 32) && \
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 809d 	beq.w	8000b44 <_ZN8APDS996018processGestureDataEv+0x198>
	{

		/* Find the first value in U/D/L/R above the threshold */
		for( i = 0; i < gesture_data_.total_gestures; i++ )
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000a14:	461a      	mov	r2, r3
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	da3c      	bge.n	8000a96 <_ZN8APDS996018processGestureDataEv+0xea>
		{
			if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	4413      	add	r3, r2
 8000a22:	3368      	adds	r3, #104	; 0x68
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d931      	bls.n	8000a8e <_ZN8APDS996018processGestureDataEv+0xe2>
		     	(gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	4413      	add	r3, r2
 8000a30:	3388      	adds	r3, #136	; 0x88
 8000a32:	781b      	ldrb	r3, [r3, #0]
			if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000a34:	2b0a      	cmp	r3, #10
 8000a36:	d92a      	bls.n	8000a8e <_ZN8APDS996018processGestureDataEv+0xe2>
				(gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	4413      	add	r3, r2
 8000a3e:	33a8      	adds	r3, #168	; 0xa8
 8000a40:	781b      	ldrb	r3, [r3, #0]
		     	(gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d923      	bls.n	8000a8e <_ZN8APDS996018processGestureDataEv+0xe2>
				(gesture_data_.r_data[i] > GESTURE_THRESHOLD_OUT) )
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	4413      	add	r3, r2
 8000a4c:	33c8      	adds	r3, #200	; 0xc8
 8000a4e:	781b      	ldrb	r3, [r3, #0]
				(gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000a50:	2b0a      	cmp	r3, #10
 8000a52:	d91c      	bls.n	8000a8e <_ZN8APDS996018processGestureDataEv+0xe2>
			{

				u_first = gesture_data_.u_data[i];
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	4413      	add	r3, r2
 8000a5a:	3368      	adds	r3, #104	; 0x68
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				d_first = gesture_data_.d_data[i];
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	4413      	add	r3, r2
 8000a68:	3388      	adds	r3, #136	; 0x88
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				l_first = gesture_data_.l_data[i];
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	4413      	add	r3, r2
 8000a76:	33a8      	adds	r3, #168	; 0xa8
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				r_first = gesture_data_.r_data[i];
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	4413      	add	r3, r2
 8000a84:	33c8      	adds	r3, #200	; 0xc8
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				break;
 8000a8c:	e003      	b.n	8000a96 <_ZN8APDS996018processGestureDataEv+0xea>
		for( i = 0; i < gesture_data_.total_gestures; i++ )
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	3301      	adds	r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	e7bb      	b.n	8000a0e <_ZN8APDS996018processGestureDataEv+0x62>
			}
		}

		/* If one of the _first values is 0, then there is no good data */
		if( (u_first == 0) || (d_first == 0) || \
 8000a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00b      	beq.n	8000ab6 <_ZN8APDS996018processGestureDataEv+0x10a>
 8000a9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <_ZN8APDS996018processGestureDataEv+0x10a>
 8000aa6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <_ZN8APDS996018processGestureDataEv+0x10a>
				(l_first == 0) || (r_first == 0) )
 8000aae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <_ZN8APDS996018processGestureDataEv+0x10e>
		{

			return false;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e153      	b.n	8000d62 <_ZN8APDS996018processGestureDataEv+0x3b6>
		}
		/* Find the last value in U/D/L/R above the threshold */
		for( i = gesture_data_.total_gestures - 1; i >= 0; i-- )
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db3c      	blt.n	8000b44 <_ZN8APDS996018processGestureDataEv+0x198>

			sprintf((char*)msg," R: %d ",gesture_data_.r_data[i]);
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

#endif
			if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	4413      	add	r3, r2
 8000ad0:	3368      	adds	r3, #104	; 0x68
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b0a      	cmp	r3, #10
 8000ad6:	d931      	bls.n	8000b3c <_ZN8APDS996018processGestureDataEv+0x190>
					(gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	4413      	add	r3, r2
 8000ade:	3388      	adds	r3, #136	; 0x88
 8000ae0:	781b      	ldrb	r3, [r3, #0]
			if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000ae2:	2b0a      	cmp	r3, #10
 8000ae4:	d92a      	bls.n	8000b3c <_ZN8APDS996018processGestureDataEv+0x190>
					(gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	4413      	add	r3, r2
 8000aec:	33a8      	adds	r3, #168	; 0xa8
 8000aee:	781b      	ldrb	r3, [r3, #0]
					(gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000af0:	2b0a      	cmp	r3, #10
 8000af2:	d923      	bls.n	8000b3c <_ZN8APDS996018processGestureDataEv+0x190>
					(gesture_data_.r_data[i] > GESTURE_THRESHOLD_OUT) )
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	4413      	add	r3, r2
 8000afa:	33c8      	adds	r3, #200	; 0xc8
 8000afc:	781b      	ldrb	r3, [r3, #0]
					(gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d91c      	bls.n	8000b3c <_ZN8APDS996018processGestureDataEv+0x190>
			{

				u_last = gesture_data_.u_data[i];
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	4413      	add	r3, r2
 8000b08:	3368      	adds	r3, #104	; 0x68
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				d_last = gesture_data_.d_data[i];
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	4413      	add	r3, r2
 8000b16:	3388      	adds	r3, #136	; 0x88
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				l_last = gesture_data_.l_data[i];
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	4413      	add	r3, r2
 8000b24:	33a8      	adds	r3, #168	; 0xa8
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				r_last = gesture_data_.r_data[i];
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	4413      	add	r3, r2
 8000b32:	33c8      	adds	r3, #200	; 0xc8
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				break;
 8000b3a:	e003      	b.n	8000b44 <_ZN8APDS996018processGestureDataEv+0x198>
		for( i = gesture_data_.total_gestures - 1; i >= 0; i-- )
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
 8000b42:	e7bf      	b.n	8000ac4 <_ZN8APDS996018processGestureDataEv+0x118>
			}
		}
	}

	/* Calculate the first vs. last ratio of up/down and left/right */
	ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first);
 8000b44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2264      	movs	r2, #100	; 0x64
 8000b50:	fb03 f202 	mul.w	r2, r3, r2
 8000b54:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000b58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b5c:	440b      	add	r3, r1
 8000b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b62:	623b      	str	r3, [r7, #32]
	lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first);
 8000b64:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2264      	movs	r2, #100	; 0x64
 8000b70:	fb03 f202 	mul.w	r2, r3, r2
 8000b74:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000b78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b7c:	440b      	add	r3, r1
 8000b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b82:	61fb      	str	r3, [r7, #28]
	ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
 8000b84:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000b88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2264      	movs	r2, #100	; 0x64
 8000b90:	fb03 f202 	mul.w	r2, r3, r2
 8000b94:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000b98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b9c:	440b      	add	r3, r1
 8000b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ba2:	61bb      	str	r3, [r7, #24]
	lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
 8000ba4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2264      	movs	r2, #100	; 0x64
 8000bb0:	fb03 f202 	mul.w	r2, r3, r2
 8000bb4:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8000bb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bbc:	440b      	add	r3, r1
 8000bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

#endif

	/* Determine the difference between the first and last ratios */
	ud_delta = ud_ratio_last - ud_ratio_first;
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	613b      	str	r3, [r7, #16]
	lr_delta = lr_ratio_last - lr_ratio_first;
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	60fb      	str	r3, [r7, #12]
	sprintf((char*)msg,"\n Deltas -> UD: %d   LR: %d ",ud_delta,lr_delta);
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
#endif

	/* Accumulate the UD and LR delta values */
	gesture_ud_delta_ += ud_delta;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	441a      	add	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	gesture_lr_delta_ += lr_delta;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	441a      	add	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	sprintf((char*)msg,"\n Accumulations -> UD: %d   LR: %d ",gesture_ud_delta_,gesture_lr_delta_);
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
#endif

	/* Determine U/D gesture */
	if( gesture_ud_delta_ >= GESTURE_SENSITIVITY_1 )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bfa:	2b31      	cmp	r3, #49	; 0x31
 8000bfc:	dd04      	ble.n	8000c08 <_ZN8APDS996018processGestureDataEv+0x25c>
	{
		gesture_ud_count_ = 1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000c06:	e00f      	b.n	8000c28 <_ZN8APDS996018processGestureDataEv+0x27c>
	}
	else if( gesture_ud_delta_ <= -GESTURE_SENSITIVITY_1 )
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c0e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8000c12:	da05      	bge.n	8000c20 <_ZN8APDS996018processGestureDataEv+0x274>
	{
		gesture_ud_count_ = -1;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000c1e:	e003      	b.n	8000c28 <_ZN8APDS996018processGestureDataEv+0x27c>
	}
	else
	{
		gesture_ud_count_ = 0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}

	/* Determine L/R gesture */
	if( gesture_lr_delta_ >= GESTURE_SENSITIVITY_1 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c2e:	2b31      	cmp	r3, #49	; 0x31
 8000c30:	dd04      	ble.n	8000c3c <_ZN8APDS996018processGestureDataEv+0x290>
	{
		gesture_lr_count_ = 1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8000c3a:	e00f      	b.n	8000c5c <_ZN8APDS996018processGestureDataEv+0x2b0>
	}
	else if( gesture_lr_delta_ <= -GESTURE_SENSITIVITY_1 )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c42:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8000c46:	da05      	bge.n	8000c54 <_ZN8APDS996018processGestureDataEv+0x2a8>
	{
		gesture_lr_count_ = -1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8000c52:	e003      	b.n	8000c5c <_ZN8APDS996018processGestureDataEv+0x2b0>
	}
	else
	{
		gesture_lr_count_ = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	}

	/* Determine Near/Far gesture */
	if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14c      	bne.n	8000d00 <_ZN8APDS996018processGestureDataEv+0x354>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d147      	bne.n	8000d00 <_ZN8APDS996018processGestureDataEv+0x354>
	{
		if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b13      	cmp	r3, #19
 8000c7a:	dc70      	bgt.n	8000d5e <_ZN8APDS996018processGestureDataEv+0x3b2>
				(abs(lr_delta) < GESTURE_SENSITIVITY_2) )
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bfb8      	it	lt
 8000c82:	425b      	neglt	r3, r3
		if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 8000c84:	2b13      	cmp	r3, #19
 8000c86:	dc6a      	bgt.n	8000d5e <_ZN8APDS996018processGestureDataEv+0x3b2>
		{

			if( (ud_delta == 0) && (lr_delta == 0) )
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <_ZN8APDS996018processGestureDataEv+0x2f8>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d107      	bne.n	8000ca4 <_ZN8APDS996018processGestureDataEv+0x2f8>
			{
				gesture_near_count_++;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000ca2:	e00c      	b.n	8000cbe <_ZN8APDS996018processGestureDataEv+0x312>
			}
			else if( (ud_delta != 0) || (lr_delta != 0) )
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <_ZN8APDS996018processGestureDataEv+0x304>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <_ZN8APDS996018processGestureDataEv+0x312>
			{
				gesture_far_count_++;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			}

			if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 2) )
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8000cc4:	2b09      	cmp	r3, #9
 8000cc6:	dd4a      	ble.n	8000d5e <_ZN8APDS996018processGestureDataEv+0x3b2>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	dd45      	ble.n	8000d5e <_ZN8APDS996018processGestureDataEv+0x3b2>
			{
				if( (ud_delta == 0) && (lr_delta == 0) )
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d107      	bne.n	8000ce8 <_ZN8APDS996018processGestureDataEv+0x33c>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <_ZN8APDS996018processGestureDataEv+0x33c>
				{
					gesture_state_ = NEAR_STATE;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000ce6:	e009      	b.n	8000cfc <_ZN8APDS996018processGestureDataEv+0x350>
				}
				else if( (ud_delta != 0) && (lr_delta != 0) )
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <_ZN8APDS996018processGestureDataEv+0x350>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <_ZN8APDS996018processGestureDataEv+0x350>
				{
					gesture_state_ = FAR_STATE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				}
				return true;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e030      	b.n	8000d62 <_ZN8APDS996018processGestureDataEv+0x3b6>
			}
		}
	} else {
		if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b13      	cmp	r3, #19
 8000d0a:	dc29      	bgt.n	8000d60 <_ZN8APDS996018processGestureDataEv+0x3b4>
				(abs(lr_delta) < GESTURE_SENSITIVITY_2) )
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bfb8      	it	lt
 8000d12:	425b      	neglt	r3, r3
		if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 8000d14:	2b13      	cmp	r3, #19
 8000d16:	dc23      	bgt.n	8000d60 <_ZN8APDS996018processGestureDataEv+0x3b4>
		{

			if( (ud_delta == 0) && (lr_delta == 0) )
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <_ZN8APDS996018processGestureDataEv+0x386>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d106      	bne.n	8000d32 <_ZN8APDS996018processGestureDataEv+0x386>
			{
				gesture_near_count_++;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			}

			if( gesture_near_count_ >= 10 )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8000d38:	2b09      	cmp	r3, #9
 8000d3a:	dd11      	ble.n	8000d60 <_ZN8APDS996018processGestureDataEv+0x3b4>
			{
				gesture_ud_count_ = 0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
				gesture_lr_count_ = 0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				gesture_ud_delta_ = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
				gesture_lr_delta_ = 0;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000d5c:	e000      	b.n	8000d60 <_ZN8APDS996018processGestureDataEv+0x3b4>
		if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 8000d5e:	bf00      	nop
	sprintf((char*)msg,"\n UD_CT: %d   LR_CT: %d   NEAR_CT: %d   FAR_CT: %d ",
			 gesture_ud_count_,gesture_lr_count_,gesture_near_count_,gesture_far_count_);
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
#endif

	return false;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3734      	adds	r7, #52	; 0x34
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <_ZN8APDS996013decodeGestureEv>:
/*
 * @brief Determines swipe direction or near/far state
 * @return True if near/far event. False otherwise.
 */
bool APDS9960::decodeGesture()
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	/* Return if near or far event is detected */
	if( gesture_state_ == NEAR_STATE )
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d105      	bne.n	8000d8a <_ZN8APDS996013decodeGestureEv+0x1e>
	{
		gesture_motion_ = DIR_NEAR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		return true;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e0db      	b.n	8000f42 <_ZN8APDS996013decodeGestureEv+0x1d6>
	}
	else if ( gesture_state_ == FAR_STATE )
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d105      	bne.n	8000da0 <_ZN8APDS996013decodeGestureEv+0x34>
	{
		gesture_motion_ = DIR_FAR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2206      	movs	r2, #6
 8000d98:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		return true;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e0d0      	b.n	8000f42 <_ZN8APDS996013decodeGestureEv+0x1d6>
	}

	/* Determine swipe direction */
	if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) )
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000daa:	d109      	bne.n	8000dc0 <_ZN8APDS996013decodeGestureEv+0x54>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d104      	bne.n	8000dc0 <_ZN8APDS996013decodeGestureEv+0x54>
	{
		gesture_motion_ = DIR_UP;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2203      	movs	r2, #3
 8000dba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000dbe:	e0bf      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
	}
	else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) )
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d109      	bne.n	8000dde <_ZN8APDS996013decodeGestureEv+0x72>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d104      	bne.n	8000dde <_ZN8APDS996013decodeGestureEv+0x72>
	{
		gesture_motion_ = DIR_DOWN;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000ddc:	e0b0      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
	}
	else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d109      	bne.n	8000dfc <_ZN8APDS996013decodeGestureEv+0x90>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d104      	bne.n	8000dfc <_ZN8APDS996013decodeGestureEv+0x90>
	{
		gesture_motion_ = DIR_RIGHT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2202      	movs	r2, #2
 8000df6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000dfa:	e0a1      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
	}
	else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10a      	bne.n	8000e1c <_ZN8APDS996013decodeGestureEv+0xb0>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d104      	bne.n	8000e1c <_ZN8APDS996013decodeGestureEv+0xb0>
	{
		gesture_motion_ = DIR_LEFT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000e1a:	e091      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
	}
	else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e26:	d11d      	bne.n	8000e64 <_ZN8APDS996013decodeGestureEv+0xf8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d118      	bne.n	8000e64 <_ZN8APDS996013decodeGestureEv+0xf8>
	{
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bfb8      	it	lt
 8000e4a:	425b      	neglt	r3, r3
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dd04      	ble.n	8000e5a <_ZN8APDS996013decodeGestureEv+0xee>
		{
			gesture_motion_ = DIR_UP;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000e58:	e072      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
		else
		{
			gesture_motion_ = DIR_RIGHT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000e62:	e06d      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
	}
	else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == -1) )
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d11e      	bne.n	8000eac <_ZN8APDS996013decodeGestureEv+0x140>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d118      	bne.n	8000eac <_ZN8APDS996013decodeGestureEv+0x140>
	{
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e80:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e84:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bfb8      	it	lt
 8000e92:	425b      	neglt	r3, r3
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dd04      	ble.n	8000ea2 <_ZN8APDS996013decodeGestureEv+0x136>
		{
			gesture_motion_ = DIR_DOWN;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000ea0:	e04e      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
		else
		{
			gesture_motion_ = DIR_LEFT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000eaa:	e049      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
	}
	else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == -1) )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb6:	d11e      	bne.n	8000ef6 <_ZN8APDS996013decodeGestureEv+0x18a>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec2:	d118      	bne.n	8000ef6 <_ZN8APDS996013decodeGestureEv+0x18a>
	{
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ece:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfb8      	it	lt
 8000edc:	425b      	neglt	r3, r3
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dd04      	ble.n	8000eec <_ZN8APDS996013decodeGestureEv+0x180>
		{
			gesture_motion_ = DIR_UP;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000eea:	e029      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
		else
		{
			gesture_motion_ = DIR_LEFT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000ef4:	e024      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
	}
	else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 1) )
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d11d      	bne.n	8000f3c <_ZN8APDS996013decodeGestureEv+0x1d0>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d118      	bne.n	8000f3c <_ZN8APDS996013decodeGestureEv+0x1d0>
	{
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f10:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f14:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bfb8      	it	lt
 8000f22:	425b      	neglt	r3, r3
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dd04      	ble.n	8000f32 <_ZN8APDS996013decodeGestureEv+0x1c6>
		{
			gesture_motion_ = DIR_DOWN;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000f30:	e006      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		} else {
			gesture_motion_ = DIR_RIGHT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2202      	movs	r2, #2
 8000f36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) )
 8000f3a:	e001      	b.n	8000f40 <_ZN8APDS996013decodeGestureEv+0x1d4>
		}
	}
	else
	{
		return false;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e000      	b.n	8000f42 <_ZN8APDS996013decodeGestureEv+0x1d6>
	}

	return true;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <_ZN8APDS996019setProxIntLowThreshEh>:
 * @brief Sets the lower threshold for proximity detection
 * @param[in] threshold the lower proximity threshold
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setProxIntLowThresh(uint8_t threshold)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	if( !APDS_9960_Write(APDS9960_PILT, threshold) )
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2189      	movs	r1, #137	; 0x89
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 faac 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_ZN8APDS996019setProxIntLowThreshEh+0x28>
	{
		return false;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <_ZN8APDS996019setProxIntLowThreshEh+0x2a>
	}
	return true;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZN8APDS996020setProxIntHighThreshEh>:
 * @brief Sets the high threshold for proximity detection
 * @param[in] threshold the high proximity threshold
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setProxIntHighThresh(uint8_t threshold)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
	if( !APDS_9960_Write(APDS9960_PIHT, threshold) )
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	218b      	movs	r1, #139	; 0x8b
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fa93 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f083 0301 	eor.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <_ZN8APDS996020setProxIntHighThreshEh+0x28>
	{
		return false;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <_ZN8APDS996020setProxIntHighThreshEh+0x2a>
	}

	return true;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZN8APDS996011setLEDDriveEh>:
 *   3         12.5 mA
 * @param[in] drive the value (0-3) for the LED drive strength
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setLEDDrive(uint8_t drive)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from CONTROL register */
	if( !APDS_9960_Read(APDS9960_CONTROL, val) )
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	218f      	movs	r1, #143	; 0x8f
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fa9f 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_ZN8APDS996011setLEDDriveEh+0x2a>
	{
		return false;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e01f      	b.n	800101a <_ZN8APDS996011setLEDDriveEh+0x6a>
	}

	/* Set bits in register to given value */
	drive &= 0b00000011;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	70fb      	strb	r3, [r7, #3]
	drive = drive << 6;
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	70fb      	strb	r3, [r7, #3]
	val &= 0b00111111;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONTROL register */
	if( !APDS_9960_Write(APDS9960_CONTROL, val) )
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	461a      	mov	r2, r3
 8001000:	218f      	movs	r1, #143	; 0x8f
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fa5a 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8001008:	4603      	mov	r3, r0
 800100a:	f083 0301 	eor.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <_ZN8APDS996011setLEDDriveEh+0x68>
	{
		return false;
 8001014:	2300      	movs	r3, #0
 8001016:	e000      	b.n	800101a <_ZN8APDS996011setLEDDriveEh+0x6a>
	}

	return true;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN8APDS996016setProximityGainEh>:
 *   3       8x
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setProximityGain(uint8_t drive)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from CONTROL register */
	if( !APDS_9960_Read(APDS9960_CONTROL, val) )
 800102e:	f107 030f 	add.w	r3, r7, #15
 8001032:	461a      	mov	r2, r3
 8001034:	218f      	movs	r1, #143	; 0x8f
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fa66 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 800103c:	4603      	mov	r3, r0
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <_ZN8APDS996016setProximityGainEh+0x2a>
	{
		return false;
 8001048:	2300      	movs	r3, #0
 800104a:	e020      	b.n	800108e <_ZN8APDS996016setProximityGainEh+0x6c>
	}

	/* Set bits in register to given value */
	drive &= 0b00000011;
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	70fb      	strb	r3, [r7, #3]
	drive = drive << 2;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	70fb      	strb	r3, [r7, #3]
	val &= 0b11110011;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	f023 030c 	bic.w	r3, r3, #12
 8001060:	b2db      	uxtb	r3, r3
 8001062:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	4313      	orrs	r3, r2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONTROL register */
	if( !APDS_9960_Read(APDS9960_CONTROL, val) )
 800106e:	f107 030f 	add.w	r3, r7, #15
 8001072:	461a      	mov	r2, r3
 8001074:	218f      	movs	r1, #143	; 0x8f
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 fa46 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 800107c:	4603      	mov	r3, r0
 800107e:	f083 0301 	eor.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <_ZN8APDS996016setProximityGainEh+0x6a>
	{
		return false;
 8001088:	2300      	movs	r3, #0
 800108a:	e000      	b.n	800108e <_ZN8APDS996016setProximityGainEh+0x6c>
	}

	return true;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN8APDS996019setAmbientLightGainEh>:
 *   3       64x
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setAmbientLightGain(uint8_t drive)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from CONTROL register */
	if( !APDS_9960_Read(APDS9960_CONTROL, val) )
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	461a      	mov	r2, r3
 80010a8:	218f      	movs	r1, #143	; 0x8f
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fa2c 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <_ZN8APDS996019setAmbientLightGainEh+0x2a>
	{
		return false;
 80010bc:	2300      	movs	r3, #0
 80010be:	e01c      	b.n	80010fa <_ZN8APDS996019setAmbientLightGainEh+0x64>
	}

	/* Set bits in register to given value */
	drive &= 0b00000011;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	70fb      	strb	r3, [r7, #3]
	val &= 0b11111100;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f023 0303 	bic.w	r3, r3, #3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONTROL register */
	if( !APDS_9960_Write(APDS9960_CONTROL, val) )
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	461a      	mov	r2, r3
 80010e0:	218f      	movs	r1, #143	; 0x8f
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f9ea 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f083 0301 	eor.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <_ZN8APDS996019setAmbientLightGainEh+0x62>
	{
		return false;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e000      	b.n	80010fa <_ZN8APDS996019setAmbientLightGainEh+0x64>
	}

	return true;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_ZN8APDS996011setLEDBoostEh>:
 *   3        300%
 * @param[in] drive the value (0-3) for current boost (100-300%)
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setLEDBoost(uint8_t boost)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from CONFIG2 register */
	if( !APDS_9960_Read(APDS9960_CONFIG2, val) )
 800110e:	f107 030f 	add.w	r3, r7, #15
 8001112:	461a      	mov	r2, r3
 8001114:	2190      	movs	r1, #144	; 0x90
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f9f6 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 800111c:	4603      	mov	r3, r0
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <_ZN8APDS996011setLEDBoostEh+0x2a>
	{
		return false;
 8001128:	2300      	movs	r3, #0
 800112a:	e01f      	b.n	800116c <_ZN8APDS996011setLEDBoostEh+0x6a>
	}

	/* Set bits in register to given value */
	boost &= 0b00000011;
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	70fb      	strb	r3, [r7, #3]
	boost = boost << 4;
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	70fb      	strb	r3, [r7, #3]
	val &= 0b11001111;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001140:	b2db      	uxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
	val |= boost;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	4313      	orrs	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into CONFIG2 register */
	if( !APDS_9960_Write(APDS9960_CONFIG2, val) )
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	461a      	mov	r2, r3
 8001152:	2190      	movs	r1, #144	; 0x90
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f9b1 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800115a:	4603      	mov	r3, r0
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <_ZN8APDS996011setLEDBoostEh+0x68>
	{
		return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <_ZN8APDS996011setLEDBoostEh+0x6a>
	}
	return true;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZN8APDS996021setGestureEnterThreshEh>:
 * @brief Sets the entry proximity threshold for gesture sensing
 * @param[in] threshold proximity value needed to start gesture mode
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureEnterThresh(uint8_t threshold)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	if( !APDS_9960_Write(APDS9960_GPENTH, threshold) )
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	461a      	mov	r2, r3
 8001184:	21a0      	movs	r1, #160	; 0xa0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f998 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800118c:	4603      	mov	r3, r0
 800118e:	f083 0301 	eor.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_ZN8APDS996021setGestureEnterThreshEh+0x28>
	{
		return false;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <_ZN8APDS996021setGestureEnterThreshEh+0x2a>
	}

	return true;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN8APDS996020setGestureExitThreshEh>:
 * @brief Sets the exit proximity threshold for gesture sensing
 * @param[in] threshold proximity value needed to end gesture mode
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureExitThresh(uint8_t threshold)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	70fb      	strb	r3, [r7, #3]
	if( !APDS_9960_Write(APDS9960_GEXTH, threshold) )
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	461a      	mov	r2, r3
 80011b6:	21a1      	movs	r1, #161	; 0xa1
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f97f 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80011be:	4603      	mov	r3, r0
 80011c0:	f083 0301 	eor.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <_ZN8APDS996020setGestureExitThreshEh+0x28>
	{
		return false;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <_ZN8APDS996020setGestureExitThreshEh+0x2a>
	}

	return true;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_ZN8APDS996014setGestureGainEh>:
 *   3       8x
 * @param[in] gain the value for the photodiode gain
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureGain(uint8_t gain)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from GCONF2 register */
	if( !APDS_9960_Read(APDS9960_GCONF2, val) )
 80011e4:	f107 030f 	add.w	r3, r7, #15
 80011e8:	461a      	mov	r2, r3
 80011ea:	21a3      	movs	r1, #163	; 0xa3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f98b 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_ZN8APDS996014setGestureGainEh+0x2a>
	{
		return false;
 80011fe:	2300      	movs	r3, #0
 8001200:	e01f      	b.n	8001242 <_ZN8APDS996014setGestureGainEh+0x6a>
	}

	/* Set bits in register to given value */
	gain &= 0b00000011;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	70fb      	strb	r3, [r7, #3]
	gain = gain << 5;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	015b      	lsls	r3, r3, #5
 800120e:	70fb      	strb	r3, [r7, #3]
	val &= 0b10011111;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001216:	b2db      	uxtb	r3, r3
 8001218:	73fb      	strb	r3, [r7, #15]
	val |= gain;
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	4313      	orrs	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF2 register */
	if( !APDS_9960_Write(APDS9960_GCONF2, val) )
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	461a      	mov	r2, r3
 8001228:	21a3      	movs	r1, #163	; 0xa3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f946 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8001230:	4603      	mov	r3, r0
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <_ZN8APDS996014setGestureGainEh+0x68>
	{
		return false;
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <_ZN8APDS996014setGestureGainEh+0x6a>
	}

	return true;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_ZN8APDS996018setGestureLEDDriveEh>:
 *   3         12.5 mA
 * @param[in] drive the value for the LED drive current
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureLEDDrive(uint8_t drive)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from GCONF2 register */
	if( !APDS_9960_Read(APDS9960_GCONF2, val) )
 8001256:	f107 030f 	add.w	r3, r7, #15
 800125a:	461a      	mov	r2, r3
 800125c:	21a3      	movs	r1, #163	; 0xa3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f952 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 8001264:	4603      	mov	r3, r0
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <_ZN8APDS996018setGestureLEDDriveEh+0x2a>
	{
		return false;
 8001270:	2300      	movs	r3, #0
 8001272:	e01f      	b.n	80012b4 <_ZN8APDS996018setGestureLEDDriveEh+0x6a>
	}

	/* Set bits in register to given value */
	drive &= 0b00000011;
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	70fb      	strb	r3, [r7, #3]
	drive = drive << 3;
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	70fb      	strb	r3, [r7, #3]
	val &= 0b11100111;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	f023 0318 	bic.w	r3, r3, #24
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73fb      	strb	r3, [r7, #15]
	val |= drive;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	4313      	orrs	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF2 register */
	if( !APDS_9960_Write(APDS9960_GCONF2, val) )
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	461a      	mov	r2, r3
 800129a:	21a3      	movs	r1, #163	; 0xa3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f90d 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <_ZN8APDS996018setGestureLEDDriveEh+0x68>
	{
		return false;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <_ZN8APDS996018setGestureLEDDriveEh+0x6a>
	}

	return true;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZN8APDS996018setGestureWaitTimeEh>:
 *   7         39.2 ms
 * @param[in] the value for the wait time
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureWaitTime(uint8_t time)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from GCONF2 register */
	if( !APDS_9960_Read(APDS9960_GCONF2, val) )
 80012c8:	f107 030f 	add.w	r3, r7, #15
 80012cc:	461a      	mov	r2, r3
 80012ce:	21a3      	movs	r1, #163	; 0xa3
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f919 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f083 0301 	eor.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <_ZN8APDS996018setGestureWaitTimeEh+0x2a>
	{
		return false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e01c      	b.n	8001320 <_ZN8APDS996018setGestureWaitTimeEh+0x64>
	}

	/* Set bits in register to given value */
	time &= 0b00000111;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	70fb      	strb	r3, [r7, #3]
	val &= 0b11111000;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	f023 0307 	bic.w	r3, r3, #7
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
	val |= time;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF2 register */
	if( !APDS_9960_Write(APDS9960_GCONF2, val) )
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	461a      	mov	r2, r3
 8001306:	21a3      	movs	r1, #163	; 0xa3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8d7 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800130e:	4603      	mov	r3, r0
 8001310:	f083 0301 	eor.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <_ZN8APDS996018setGestureWaitTimeEh+0x62>
	{
		return false;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <_ZN8APDS996018setGestureWaitTimeEh+0x64>
	}

	return true;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_ZN8APDS996023setLightIntLowThresholdEt>:
 * @brief Sets the low threshold for ambient light interrupts
 * @param[in] threshold low threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setLightIntLowThreshold(uint16_t threshold)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
	uint8_t val_low;
	uint8_t val_high;

	/* Break 16-bit threshold into 2 8-bit values */
	val_low = threshold & 0x00FF;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	73fb      	strb	r3, [r7, #15]
	val_high = (threshold & 0xFF00) >> 8;
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b29b      	uxth	r3, r3
 800133e:	73bb      	strb	r3, [r7, #14]

	/* Write low byte */
	if( !APDS_9960_Write(APDS9960_AILTL, val_low) )
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	461a      	mov	r2, r3
 8001344:	2184      	movs	r1, #132	; 0x84
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8b8 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 800134c:	4603      	mov	r3, r0
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <_ZN8APDS996023setLightIntLowThresholdEt+0x34>
	{
		return false;
 8001358:	2300      	movs	r3, #0
 800135a:	e00e      	b.n	800137a <_ZN8APDS996023setLightIntLowThresholdEt+0x52>
	}

	/* Write high byte */
	if( !APDS_9960_Write(APDS9960_AILTH, val_high) )
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	461a      	mov	r2, r3
 8001360:	2185      	movs	r1, #133	; 0x85
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f8aa 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8001368:	4603      	mov	r3, r0
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_ZN8APDS996023setLightIntLowThresholdEt+0x50>
	{
		return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <_ZN8APDS996023setLightIntLowThresholdEt+0x52>
	}

	return true;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZN8APDS996024setLightIntHighThresholdEt>:
 * @brief Sets the high threshold for ambient light interrupts
 * @param[in] threshold high threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setLightIntHighThreshold(uint16_t threshold)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	807b      	strh	r3, [r7, #2]
	uint8_t val_low;
	uint8_t val_high;

	/* Break 16-bit threshold into 2 8-bit values */
	val_low = threshold & 0x00FF;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	73fb      	strb	r3, [r7, #15]
	val_high = (threshold & 0xFF00) >> 8;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	73bb      	strb	r3, [r7, #14]

	/* Write low byte */
	if( !APDS_9960_Write(APDS9960_AIHTL, val_low) )
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	461a      	mov	r2, r3
 800139e:	2186      	movs	r1, #134	; 0x86
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f88b 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <_ZN8APDS996024setLightIntHighThresholdEt+0x34>
	{
		return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e00e      	b.n	80013d4 <_ZN8APDS996024setLightIntHighThresholdEt+0x52>
	}

	/* Write high byte */
	if( !APDS_9960_Write(APDS9960_AIHTH, val_high) )
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	461a      	mov	r2, r3
 80013ba:	2187      	movs	r1, #135	; 0x87
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f87d 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <_ZN8APDS996024setLightIntHighThresholdEt+0x50>
	{
		return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <_ZN8APDS996024setLightIntHighThresholdEt+0x52>
	}

	return true;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZN8APDS996019setGestureIntEnableEh>:
 * @brief Turns gesture-related interrupts on or off
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureIntEnable(uint8_t enable)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from GCONF4 register */
	if( !APDS_9960_Read(APDS9960_GCONF4, val) )
 80013e8:	f107 030f 	add.w	r3, r7, #15
 80013ec:	461a      	mov	r2, r3
 80013ee:	21ab      	movs	r1, #171	; 0xab
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f889 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZN8APDS996019setGestureIntEnableEh+0x2a>
	{
		return false;
 8001402:	2300      	movs	r3, #0
 8001404:	e01f      	b.n	8001446 <_ZN8APDS996019setGestureIntEnableEh+0x6a>
	}

	/* Set bits in register to given value */
	enable &= 0b00000001;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	70fb      	strb	r3, [r7, #3]
	enable = enable << 1;
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	70fb      	strb	r3, [r7, #3]
	val &= 0b11111101;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	73fb      	strb	r3, [r7, #15]
	val |= enable;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	4313      	orrs	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF4 register */
	if( !APDS_9960_Write(APDS9960_GCONF4, val) )
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	461a      	mov	r2, r3
 800142c:	21ab      	movs	r1, #171	; 0xab
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f844 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 8001434:	4603      	mov	r3, r0
 8001436:	f083 0301 	eor.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_ZN8APDS996019setGestureIntEnableEh+0x68>
	{
		return false;
 8001440:	2300      	movs	r3, #0
 8001442:	e000      	b.n	8001446 <_ZN8APDS996019setGestureIntEnableEh+0x6a>
	}

	return true;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_ZN8APDS996014setGestureModeEh>:
 * @brief Tells the state machine to either enter or exit gesture state machine
 * @param[in] mode 1 to enter gesture state machine, 0 to exit.
 * @return True if operation successful. False otherwise.
 */
bool APDS9960::setGestureMode(uint8_t mode)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	70fb      	strb	r3, [r7, #3]
	uint8_t val;

	/* Read value from GCONF4 register */
	if( !APDS_9960_Read(APDS9960_GCONF4, val) )
 800145a:	f107 030f 	add.w	r3, r7, #15
 800145e:	461a      	mov	r2, r3
 8001460:	21ab      	movs	r1, #171	; 0xab
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f850 	bl	8001508 <_ZN8APDS996014APDS_9960_ReadEhRh>
 8001468:	4603      	mov	r3, r0
 800146a:	f083 0301 	eor.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZN8APDS996014setGestureModeEh+0x2a>
	{
		return false;
 8001474:	2300      	movs	r3, #0
 8001476:	e01c      	b.n	80014b2 <_ZN8APDS996014setGestureModeEh+0x64>
	}

	/* Set bits in register to given value */
	mode &= 0b00000001;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	70fb      	strb	r3, [r7, #3]
	val &= 0b11111110;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
	val |= mode;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	4313      	orrs	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	73fb      	strb	r3, [r7, #15]

	/* Write register value back into GCONF4 register */
	if( !APDS_9960_Write(APDS9960_GCONF4, val) )
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	461a      	mov	r2, r3
 8001498:	21ab      	movs	r1, #171	; 0xab
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f80e 	bl	80014bc <_ZN8APDS996015APDS_9960_WriteEhh>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f083 0301 	eor.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <_ZN8APDS996014setGestureModeEh+0x62>
	{
		return false;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <_ZN8APDS996014setGestureModeEh+0x64>
	}

	return true;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <_ZN8APDS996015APDS_9960_WriteEhh>:
/*******************************************************************************
 * Raw I2C Reads and Writes
 ******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
bool APDS9960::APDS_9960_Write(uint8_t reg,uint8_t val)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af04      	add	r7, sp, #16
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
 80014c8:	4613      	mov	r3, r2
 80014ca:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
	// uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	status = HAL_I2C_Mem_Write(&hi2c1,APDS9960_I2C_ADDR,reg,1,&val,1,HAL_MAX_DELAY);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	2172      	movs	r1, #114	; 0x72
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <_ZN8APDS996015APDS_9960_WriteEhh+0x48>)
 80014e8:	f001 fde2 	bl	80030b0 <HAL_I2C_Mem_Write>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <_ZN8APDS996015APDS_9960_WriteEhh+0x3e>
	{
		return false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <_ZN8APDS996015APDS_9960_WriteEhh+0x40>
	}
	return true;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000090 	.word	0x20000090

08001508 <_ZN8APDS996014APDS_9960_ReadEhRh>:
////////////////////////////////////////////////////////////////////////////////
bool APDS9960::APDS_9960_Read(uint8_t reg,uint8_t &val)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	460b      	mov	r3, r1
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
	uint8_t wreg = reg;
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	75bb      	strb	r3, [r7, #22]
	status = HAL_I2C_Master_Transmit(&hi2c1, APDS9960_I2C_ADDR, &wreg, 1, HAL_MAX_DELAY);
 800151e:	f107 0216 	add.w	r2, r7, #22
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	2172      	movs	r1, #114	; 0x72
 800152c:	480f      	ldr	r0, [pc, #60]	; (800156c <_ZN8APDS996014APDS_9960_ReadEhRh+0x64>)
 800152e:	f001 fa55 	bl	80029dc <HAL_I2C_Master_Transmit>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_ZN8APDS996014APDS_9960_ReadEhRh+0x38>
	{
		return false;
 800153c:	2300      	movs	r3, #0
 800153e:	e010      	b.n	8001562 <_ZN8APDS996014APDS_9960_ReadEhRh+0x5a>
	}
	status = HAL_I2C_Master_Receive(&hi2c1, APDS9960_I2C_ADDR, &val, 1, HAL_MAX_DELAY);
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	2172      	movs	r1, #114	; 0x72
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <_ZN8APDS996014APDS_9960_ReadEhRh+0x64>)
 800154e:	f001 fb43 	bl	8002bd8 <HAL_I2C_Master_Receive>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK)
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <_ZN8APDS996014APDS_9960_ReadEhRh+0x58>
	{
		return false;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <_ZN8APDS996014APDS_9960_ReadEhRh+0x5a>
	}
	return true;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000090 	.word	0x20000090

08001570 <_ZN8APDS996020APDS_9960_Read_BlockEhPhj>:
////////////////////////////////////////////////////////////////////////////////
int APDS9960::APDS_9960_Read_Block(uint8_t reg, uint8_t *val, unsigned int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	460b      	mov	r3, r1
 800157e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	75fb      	strb	r3, [r7, #23]
	uint8_t wreg = reg;
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	75bb      	strb	r3, [r7, #22]
	status = HAL_I2C_Master_Transmit(&hi2c1, APDS9960_I2C_ADDR, &wreg, 1, HAL_MAX_DELAY);
 8001588:	f107 0216 	add.w	r2, r7, #22
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	2172      	movs	r1, #114	; 0x72
 8001596:	4811      	ldr	r0, [pc, #68]	; (80015dc <_ZN8APDS996020APDS_9960_Read_BlockEhPhj+0x6c>)
 8001598:	f001 fa20 	bl	80029dc <HAL_I2C_Master_Transmit>
 800159c:	4603      	mov	r3, r0
 800159e:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK)
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <_ZN8APDS996020APDS_9960_Read_BlockEhPhj+0x3c>
	{
		return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e012      	b.n	80015d2 <_ZN8APDS996020APDS_9960_Read_BlockEhPhj+0x62>
	}
	status = HAL_I2C_Master_Receive(&hi2c1, APDS9960_I2C_ADDR, val, len, HAL_MAX_DELAY);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	9200      	str	r2, [sp, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	2172      	movs	r1, #114	; 0x72
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <_ZN8APDS996020APDS_9960_Read_BlockEhPhj+0x6c>)
 80015bc:	f001 fb0c 	bl	8002bd8 <HAL_I2C_Master_Receive>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <_ZN8APDS996020APDS_9960_Read_BlockEhPhj+0x60>
	{
		return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e000      	b.n	80015d2 <_ZN8APDS996020APDS_9960_Read_BlockEhPhj+0x62>
	}
	return len;
 80015d0:	683b      	ldr	r3, [r7, #0]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000090 	.word	0x20000090

080015e0 <_Z21send_uart_to_transmitPc>:
void motor_up();//Raise blind
void motor_down();//Lower blind
void stop_system();//Stom motors

void send_uart_to_transmit(char* text) //Send data using UART
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)text, strlen(text), HAL_MAX_DELAY);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe fdaf 	bl	800014c <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <_Z21send_uart_to_transmitPc+0x28>)
 80015fa:	f002 fffd 	bl	80045f8 <HAL_UART_Transmit>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200000e4 	.word	0x200000e4

0800160c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//ISR
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0)
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_GPIO_EXTI_Callback+0x16>
		isr_gesture_flag = true;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GPIO_EXTI_Callback+0x20>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000238 	.word	0x20000238

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09e      	sub	sp, #120	; 0x78
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//I2C scanner
	uint8_t ack; // Recognition bit
	char dir[100];
	int nd = 0;    //List of I2C devices found
 8001636:	2300      	movs	r3, #0
 8001638:	677b      	str	r3, [r7, #116]	; 0x74
	int counter = HAL_GetTick(); //Timer
 800163a:	f000 fd51 	bl	80020e0 <HAL_GetTick>
 800163e:	4603      	mov	r3, r0
 8001640:	66fb      	str	r3, [r7, #108]	; 0x6c
	int button_count=0;
 8001642:	2300      	movs	r3, #0
 8001644:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001646:	f000 fcf3 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164a:	f000 f9a9 	bl	80019a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164e:	f000 fa59 	bl	8001b04 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001652:	f000 f9f5 	bl	8001a40 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8001656:	f000 fa27 	bl	8001aa8 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  //////////////  I2C DEVICE SCANNER ////////////////////////////////////////////////////
  send_uart_to_transmit(" Scanning I2C devices\n");
 800165a:	48a6      	ldr	r0, [pc, #664]	; (80018f4 <main+0x2c4>)
 800165c:	f7ff ffc0 	bl	80015e0 <_Z21send_uart_to_transmitPc>
  for(uint8_t adress=0;adress<128;adress++) //4 bits => 128 possible addresses
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001666:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 800166a:	2b00      	cmp	r3, #0
 800166c:	db2d      	blt.n	80016ca <main+0x9a>
  {
	  ack = HAL_I2C_IsDeviceReady(&hi2c1,adress<<1,3,HAL_MAX_DELAY);
 800166e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001672:	b29b      	uxth	r3, r3
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	b299      	uxth	r1, r3
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	2203      	movs	r2, #3
 800167e:	489e      	ldr	r0, [pc, #632]	; (80018f8 <main+0x2c8>)
 8001680:	f001 fe10 	bl	80032a4 <HAL_I2C_IsDeviceReady>
 8001684:	4603      	mov	r3, r0
 8001686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  //The slave responds if it is its address.
	  if(ack == HAL_OK)
 800168a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <main+0x8e>
	  {
		  nd++;
 8001692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001694:	3301      	adds	r3, #1
 8001696:	677b      	str	r3, [r7, #116]	; 0x74
		  sprintf((char*)dir," Device %d: 0x%X  \n",nd,adress); //Convert to string
 8001698:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800169c:	4638      	mov	r0, r7
 800169e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80016a0:	4996      	ldr	r1, [pc, #600]	; (80018fc <main+0x2cc>)
 80016a2:	f003 fa53 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)dir,strlen(dir),HAL_MAX_DELAY);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fd4f 	bl	800014c <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4639      	mov	r1, r7
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	4891      	ldr	r0, [pc, #580]	; (8001900 <main+0x2d0>)
 80016ba:	f002 ff9d 	bl	80045f8 <HAL_UART_Transmit>
  for(uint8_t adress=0;adress<128;adress++) //4 bits => 128 possible addresses
 80016be:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80016c2:	3301      	adds	r3, #1
 80016c4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80016c8:	e7cd      	b.n	8001666 <main+0x36>
	  }
  }
  /////////////////////////////////////////////////
  if(apds.init()==true) //INITIALIZATION: APDS-9960
 80016ca:	488e      	ldr	r0, [pc, #568]	; (8001904 <main+0x2d4>)
 80016cc:	f7fe fd97 	bl	80001fe <_ZN8APDS99604initEv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <main+0xbe>
  {
	  send_uart_to_transmit("\n APDS9960 initialized successfully\n");
 80016e0:	4889      	ldr	r0, [pc, #548]	; (8001908 <main+0x2d8>)
 80016e2:	f7ff ff7d 	bl	80015e0 <_Z21send_uart_to_transmitPc>
	  HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f000 fd04 	bl	80020f4 <HAL_Delay>
 80016ec:	e005      	b.n	80016fa <main+0xca>

  }
  else
  {
	  send_uart_to_transmit("\n ..ERROR.. Failed to initialize APDS9960\n");
 80016ee:	4887      	ldr	r0, [pc, #540]	; (800190c <main+0x2dc>)
 80016f0:	f7ff ff76 	bl	80015e0 <_Z21send_uart_to_transmitPc>
	  HAL_Delay(100);
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f000 fcfd 	bl	80020f4 <HAL_Delay>

  }

  if(apds.enableGestureSensor(true)) //INITIALIZATION: GESTURE MODE
 80016fa:	2101      	movs	r1, #1
 80016fc:	4881      	ldr	r0, [pc, #516]	; (8001904 <main+0x2d4>)
 80016fe:	f7fe ff82 	bl	8000606 <_ZN8APDS996019enableGestureSensorEb>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <main+0xe6>
  {
	  send_uart_to_transmit(" Gesture detection mode activated \n\n");
 8001708:	4881      	ldr	r0, [pc, #516]	; (8001910 <main+0x2e0>)
 800170a:	f7ff ff69 	bl	80015e0 <_Z21send_uart_to_transmitPc>
	  HAL_Delay(100);
 800170e:	2064      	movs	r0, #100	; 0x64
 8001710:	f000 fcf0 	bl	80020f4 <HAL_Delay>
 8001714:	e005      	b.n	8001722 <main+0xf2>

  }
  else
  {
	  send_uart_to_transmit(" ..ERROR.. Could not start gesture detection mode.\n\n");
 8001716:	487f      	ldr	r0, [pc, #508]	; (8001914 <main+0x2e4>)
 8001718:	f7ff ff62 	bl	80015e0 <_Z21send_uart_to_transmitPc>
	  HAL_Delay(100);
 800171c:	2064      	movs	r0, #100	; 0x64
 800171e:	f000 fce9 	bl	80020f4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( isr_gesture_flag == true )
 8001722:	4b7d      	ldr	r3, [pc, #500]	; (8001918 <main+0x2e8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <main+0x116>
	  {
		  HAL_NVIC_DisableIRQ(EXTI0_IRQn); //Disable interrupts
 8001736:	2006      	movs	r0, #6
 8001738:	f000 fe25 	bl	8002386 <HAL_NVIC_DisableIRQ>
		  handleGesture();
 800173c:	f000 fa52 	bl	8001be4 <_Z13handleGesturev>
		  isr_gesture_flag = false;
 8001740:	4b75      	ldr	r3, [pc, #468]	; (8001918 <main+0x2e8>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]

	  }

	  if ((status_UP==1 || status_DOWN==1) && (HAL_GetTick()-time)>Tmax) //Disable motors after a set time
 8001746:	4b75      	ldr	r3, [pc, #468]	; (800191c <main+0x2ec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d003      	beq.n	8001756 <main+0x126>
 800174e:	4b74      	ldr	r3, [pc, #464]	; (8001920 <main+0x2f0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10b      	bne.n	800176e <main+0x13e>
 8001756:	f000 fcc3 	bl	80020e0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <main+0x2f4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1ad2      	subs	r2, r2, r3
 8001762:	4b71      	ldr	r3, [pc, #452]	; (8001928 <main+0x2f8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d901      	bls.n	800176e <main+0x13e>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <main+0x140>
 800176e:	2300      	movs	r3, #0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <main+0x148>
	       stop_system();
 8001774:	f000 fabe 	bl	8001cf4 <_Z11stop_systemv>

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == 1)
 8001778:	2108      	movs	r1, #8
 800177a:	486c      	ldr	r0, [pc, #432]	; (800192c <main+0x2fc>)
 800177c:	f000 ffa2 	bl	80026c4 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01c      	beq.n	80017ca <main+0x19a>
	  {
		  stop_system();
 8001790:	f000 fab0 	bl	8001cf4 <_Z11stop_systemv>
		  HAL_Delay(150);
 8001794:	2096      	movs	r0, #150	; 0x96
 8001796:	f000 fcad 	bl	80020f4 <HAL_Delay>
		  motor_up();
 800179a:	f000 fa6f 	bl	8001c7c <_Z8motor_upv>
		  send_uart_to_transmit("\n UP BUTTON ON \n");
 800179e:	4864      	ldr	r0, [pc, #400]	; (8001930 <main+0x300>)
 80017a0:	f7ff ff1e 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  while (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == 1)
 80017a4:	2108      	movs	r1, #8
 80017a6:	4861      	ldr	r0, [pc, #388]	; (800192c <main+0x2fc>)
 80017a8:	f000 ff8c 	bl	80026c4 <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d000      	beq.n	80017be <main+0x18e>
 80017bc:	e7f2      	b.n	80017a4 <main+0x174>
		  {
			  //Raise blinds
		  }
		  send_uart_to_transmit("\n UP BUTTON OFF \n");
 80017be:	485d      	ldr	r0, [pc, #372]	; (8001934 <main+0x304>)
 80017c0:	f7ff ff0e 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  stop_system();
 80017c4:	f000 fa96 	bl	8001cf4 <_Z11stop_systemv>
 80017c8:	e0e2      	b.n	8001990 <main+0x360>
	  }

	  else if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4) == 1)
 80017ca:	2110      	movs	r1, #16
 80017cc:	4857      	ldr	r0, [pc, #348]	; (800192c <main+0x2fc>)
 80017ce:	f000 ff79 	bl	80026c4 <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <main+0x1ec>
	  {
		  stop_system();
 80017e2:	f000 fa87 	bl	8001cf4 <_Z11stop_systemv>
		  HAL_Delay(150);
 80017e6:	2096      	movs	r0, #150	; 0x96
 80017e8:	f000 fc84 	bl	80020f4 <HAL_Delay>
		  motor_down();
 80017ec:	f000 fa64 	bl	8001cb8 <_Z10motor_downv>
		  send_uart_to_transmit("\n DOWN BUTTON ON \n");
 80017f0:	4851      	ldr	r0, [pc, #324]	; (8001938 <main+0x308>)
 80017f2:	f7ff fef5 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  while (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4) == 1)
 80017f6:	2110      	movs	r1, #16
 80017f8:	484c      	ldr	r0, [pc, #304]	; (800192c <main+0x2fc>)
 80017fa:	f000 ff63 	bl	80026c4 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d000      	beq.n	8001810 <main+0x1e0>
 800180e:	e7f2      	b.n	80017f6 <main+0x1c6>
		  {
			  //Lower blinds
		  }
		  send_uart_to_transmit("\n DOWN BUTTON OFF \n");
 8001810:	484a      	ldr	r0, [pc, #296]	; (800193c <main+0x30c>)
 8001812:	f7ff fee5 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  stop_system();
 8001816:	f000 fa6d 	bl	8001cf4 <_Z11stop_systemv>
 800181a:	e0b9      	b.n	8001990 <main+0x360>
	  }


	  else if (UP_flag == true) //Gesture raise blinds
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <main+0x310>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	bf0c      	ite	eq
 8001826:	2301      	moveq	r3, #1
 8001828:	2300      	movne	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <main+0x212>
	  {
		  send_uart_to_transmit("\n RISING BLIND \n");
 8001830:	4844      	ldr	r0, [pc, #272]	; (8001944 <main+0x314>)
 8001832:	f7ff fed5 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  motor_up();
 8001836:	f000 fa21 	bl	8001c7c <_Z8motor_upv>
		  UP_flag = false;
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <main+0x310>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e0a6      	b.n	8001990 <main+0x360>
	  }
	  else if (DOWN_flag == true)//Gesture lower blinds
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <main+0x318>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <main+0x238>
		  {
		  send_uart_to_transmit("\n LOWERING BLIND\n");
 8001856:	483d      	ldr	r0, [pc, #244]	; (800194c <main+0x31c>)
 8001858:	f7ff fec2 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  motor_down();
 800185c:	f000 fa2c 	bl	8001cb8 <_Z10motor_downv>
		  DOWN_flag = false;
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <main+0x318>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e093      	b.n	8001990 <main+0x360>

	  }
	  else if (LEFT_flag == true) //Leftward movement
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <main+0x320>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <main+0x25a>
	  {
		  send_uart_to_transmit("\n LEFTWARD MOVEMENT <-- \n");
 800187c:	4835      	ldr	r0, [pc, #212]	; (8001954 <main+0x324>)
 800187e:	f7ff feaf 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  LEFT_flag = false;
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <main+0x320>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e082      	b.n	8001990 <main+0x360>
	  }
	  else if (RIGHT_flag == true) //Rightward movement
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <main+0x328>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <main+0x27c>
	  {
		  send_uart_to_transmit("\n RIGHTWARD MOVEMENT --> \n");
 800189e:	482f      	ldr	r0, [pc, #188]	; (800195c <main+0x32c>)
 80018a0:	f7ff fe9e 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  RIGHT_flag = false;
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <main+0x328>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e071      	b.n	8001990 <main+0x360>
	  }
	  else if (NEAR_flag == true) //Movimiento acercar
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <main+0x330>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <main+0x2a2>
	  {
		  send_uart_to_transmit("\n SYSTEM STOP \n");
 80018c0:	4828      	ldr	r0, [pc, #160]	; (8001964 <main+0x334>)
 80018c2:	f7ff fe8d 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  stop_system();
 80018c6:	f000 fa15 	bl	8001cf4 <_Z11stop_systemv>
		  NEAR_flag = false;
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <main+0x330>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e05e      	b.n	8001990 <main+0x360>
	  }
	  else if(NONE_flag == true )
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <main+0x338>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d044      	beq.n	8001970 <main+0x340>
	  {
		  send_uart_to_transmit("\n NONE GESTURE. \n");
 80018e6:	4821      	ldr	r0, [pc, #132]	; (800196c <main+0x33c>)
 80018e8:	f7ff fe7a 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  NONE_flag = false;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <main+0x338>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e04d      	b.n	8001990 <main+0x360>
 80018f4:	08005280 	.word	0x08005280
 80018f8:	20000090 	.word	0x20000090
 80018fc:	08005298 	.word	0x08005298
 8001900:	200000e4 	.word	0x200000e4
 8001904:	2000012c 	.word	0x2000012c
 8001908:	080052ac 	.word	0x080052ac
 800190c:	080052d4 	.word	0x080052d4
 8001910:	08005300 	.word	0x08005300
 8001914:	08005328 	.word	0x08005328
 8001918:	20000238 	.word	0x20000238
 800191c:	20000240 	.word	0x20000240
 8001920:	20000244 	.word	0x20000244
 8001924:	20000248 	.word	0x20000248
 8001928:	20000000 	.word	0x20000000
 800192c:	40010c00 	.word	0x40010c00
 8001930:	08005360 	.word	0x08005360
 8001934:	08005374 	.word	0x08005374
 8001938:	08005388 	.word	0x08005388
 800193c:	0800539c 	.word	0x0800539c
 8001940:	20000239 	.word	0x20000239
 8001944:	080053b0 	.word	0x080053b0
 8001948:	2000023a 	.word	0x2000023a
 800194c:	080053c4 	.word	0x080053c4
 8001950:	2000023b 	.word	0x2000023b
 8001954:	080053d8 	.word	0x080053d8
 8001958:	2000023c 	.word	0x2000023c
 800195c:	080053f4 	.word	0x080053f4
 8001960:	2000023e 	.word	0x2000023e
 8001964:	08005410 	.word	0x08005410
 8001968:	2000023f 	.word	0x2000023f
 800196c:	08005420 	.word	0x08005420
	  }
	  else if(FAR_flag == true)
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <main+0x368>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <main+0x360>
	  {
		  send_uart_to_transmit("\n FAR GESTURE. \n");
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <main+0x36c>)
 8001986:	f7ff fe2b 	bl	80015e0 <_Z21send_uart_to_transmitPc>
		  FAR_flag = false;
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <main+0x368>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);  //Enable interrupts
 8001990:	2006      	movs	r0, #6
 8001992:	f000 fcea 	bl	800236a <HAL_NVIC_EnableIRQ>
	  if ( isr_gesture_flag == true )
 8001996:	e6c4      	b.n	8001722 <main+0xf2>
 8001998:	2000023d 	.word	0x2000023d
 800199c:	08005434 	.word	0x08005434

080019a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	; 0x40
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	2228      	movs	r2, #40	; 0x28
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 ffd8 	bl	8004964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d4:	2302      	movs	r3, #2
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 f9a5 	bl	8003d38 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80019fe:	f000 f995 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a02:	230f      	movs	r3, #15
 8001a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a06:	2302      	movs	r3, #2
 8001a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fc0d 	bl	800423c <HAL_RCC_ClockConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001a32:	f000 f97b 	bl	8001d2c <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3740      	adds	r7, #64	; 0x40
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <_ZL12MX_I2C1_Initv+0x60>)
 8001a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a4c:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <_ZL12MX_I2C1_Initv+0x64>)
 8001a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7c:	4807      	ldr	r0, [pc, #28]	; (8001a9c <_ZL12MX_I2C1_Initv+0x5c>)
 8001a7e:	f000 fe69 	bl	8002754 <HAL_I2C_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001a92:	f000 f94b 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000090 	.word	0x20000090
 8001aa0:	40005400 	.word	0x40005400
 8001aa4:	000186a0 	.word	0x000186a0

08001aa8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ae0:	f002 fd3a 	bl	8004558 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001af4:	f000 f91a 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000e4 	.word	0x200000e4
 8001b00:	40004400 	.word	0x40004400

08001b04 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001b66:	481c      	ldr	r0, [pc, #112]	; (8001bd8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b68:	f000 fdc3 	bl	80026f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <_ZL12MX_GPIO_Initv+0xd8>)
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4816      	ldr	r0, [pc, #88]	; (8001bd8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b80:	f000 fc1c 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b9e:	f000 fc0d 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ba2:	2318      	movs	r3, #24
 8001ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <_ZL12MX_GPIO_Initv+0xdc>)
 8001bb6:	f000 fc01 	bl	80023bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2006      	movs	r0, #6
 8001bc0:	f000 fbb7 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bc4:	2006      	movs	r0, #6
 8001bc6:	f000 fbd0 	bl	800236a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	40010c00 	.word	0x40010c00

08001be4 <_Z13handleGesturev>:

/* USER CODE BEGIN 4 */

void handleGesture() //Gesture handler
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  if ( apds.isGestureAvailable() )
 8001be8:	481c      	ldr	r0, [pc, #112]	; (8001c5c <_Z13handleGesturev+0x78>)
 8001bea:	f7fe fd99 	bl	8000720 <_ZN8APDS996018isGestureAvailableEv>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d031      	beq.n	8001c58 <_Z13handleGesturev+0x74>
  {
    switch ( apds.readGesture() )
 8001bf4:	4819      	ldr	r0, [pc, #100]	; (8001c5c <_Z13handleGesturev+0x78>)
 8001bf6:	f7fe fdb5 	bl	8000764 <_ZN8APDS996011readGestureEv>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d826      	bhi.n	8001c50 <_Z13handleGesturev+0x6c>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <_Z13handleGesturev+0x24>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c31 	.word	0x08001c31
 8001c0c:	08001c39 	.word	0x08001c39
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	08001c41 	.word	0x08001c41
 8001c1c:	08001c49 	.word	0x08001c49
    {
      case DIR_UP:
        UP_flag = true;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <_Z13handleGesturev+0x7c>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
        break;
 8001c26:	e017      	b.n	8001c58 <_Z13handleGesturev+0x74>

      case DIR_DOWN:
        DOWN_flag = true;
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <_Z13handleGesturev+0x80>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
        break;
 8001c2e:	e013      	b.n	8001c58 <_Z13handleGesturev+0x74>

      case DIR_LEFT:
        LEFT_flag = true;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <_Z13handleGesturev+0x84>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
        break;
 8001c36:	e00f      	b.n	8001c58 <_Z13handleGesturev+0x74>

      case DIR_RIGHT:
        RIGHT_flag = true;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <_Z13handleGesturev+0x88>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
        break;
 8001c3e:	e00b      	b.n	8001c58 <_Z13handleGesturev+0x74>

      case DIR_NEAR:
        NEAR_flag = true;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <_Z13handleGesturev+0x8c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
        break;
 8001c46:	e007      	b.n	8001c58 <_Z13handleGesturev+0x74>

      case DIR_FAR:
        FAR_flag = true;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <_Z13handleGesturev+0x90>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
        break;
 8001c4e:	e003      	b.n	8001c58 <_Z13handleGesturev+0x74>

      default:
        NONE_flag = true;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <_Z13handleGesturev+0x94>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
        break;
 8001c56:	bf00      	nop
    }
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000012c 	.word	0x2000012c
 8001c60:	20000239 	.word	0x20000239
 8001c64:	2000023a 	.word	0x2000023a
 8001c68:	2000023b 	.word	0x2000023b
 8001c6c:	2000023c 	.word	0x2000023c
 8001c70:	2000023e 	.word	0x2000023e
 8001c74:	2000023d 	.word	0x2000023d
 8001c78:	2000023f 	.word	0x2000023f

08001c7c <_Z8motor_upv>:

void motor_up() //Raise blind function
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	stop_system();
 8001c80:	f000 f838 	bl	8001cf4 <_Z11stop_systemv>
	HAL_Delay(150);
 8001c84:	2096      	movs	r0, #150	; 0x96
 8001c86:	f000 fa35 	bl	80020f4 <HAL_Delay>
	status_UP = 1;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <_Z8motor_upv+0x30>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <_Z8motor_upv+0x34>)
 8001c98:	f000 fd2b 	bl	80026f2 <HAL_GPIO_WritePin>
	time = HAL_GetTick();
 8001c9c:	f000 fa20 	bl	80020e0 <HAL_GetTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <_Z8motor_upv+0x38>)
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000240 	.word	0x20000240
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	20000248 	.word	0x20000248

08001cb8 <_Z10motor_downv>:

void motor_down() //Lower blind function
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	stop_system();
 8001cbc:	f000 f81a 	bl	8001cf4 <_Z11stop_systemv>
	HAL_Delay(150);
 8001cc0:	2096      	movs	r0, #150	; 0x96
 8001cc2:	f000 fa17 	bl	80020f4 <HAL_Delay>
	status_DOWN = 1;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_Z10motor_downv+0x30>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <_Z10motor_downv+0x34>)
 8001cd4:	f000 fd0d 	bl	80026f2 <HAL_GPIO_WritePin>
	time = HAL_GetTick();
 8001cd8:	f000 fa02 	bl	80020e0 <HAL_GetTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <_Z10motor_downv+0x38>)
 8001ce0:	6013      	str	r3, [r2, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000244 	.word	0x20000244
 8001cec:	40010800 	.word	0x40010800
 8001cf0:	20000248 	.word	0x20000248

08001cf4 <_Z11stop_systemv>:

void stop_system() //Stom motors function
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	status_UP = 0;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <_Z11stop_systemv+0x2c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
	status_DOWN = 0;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <_Z11stop_systemv+0x30>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <_Z11stop_systemv+0x34>)
 8001d0c:	f000 fcf1 	bl	80026f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	4804      	ldr	r0, [pc, #16]	; (8001d28 <_Z11stop_systemv+0x34>)
 8001d18:	f000 fceb 	bl	80026f2 <HAL_GPIO_WritePin>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000240 	.word	0x20000240
 8001d24:	20000244 	.word	0x20000244
 8001d28:	40010800 	.word	0x40010800

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <_Z41__static_initialization_and_destruction_0ii>:
		{
		}
  /* USER CODE END Error_Handler_Debug */
}
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d102      	bne.n	8001d58 <_Z41__static_initialization_and_destruction_0ii+0x20>
APDS9960 apds = APDS9960();//Object APDS-9960
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001d54:	f7fe fa02 	bl	800015c <_ZN8APDS9960C1Ev>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d107      	bne.n	8001d6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001d6a:	f7fe fa27 	bl	80001bc <_ZN8APDS9960D1Ev>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000012c 	.word	0x2000012c

08001d7c <_GLOBAL__sub_I_hi2c1>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff ffd7 	bl	8001d38 <_Z41__static_initialization_and_destruction_0ii>
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_GLOBAL__sub_D_hi2c1>:
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ffcf 	bl	8001d38 <_Z41__static_initialization_and_destruction_0ii>
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_MspInit+0x5c>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <HAL_MspInit+0x5c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6193      	str	r3, [r2, #24]
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_MspInit+0x5c>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x5c>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_MspInit+0x5c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x5c>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_MspInit+0x60>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_MspInit+0x60>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000

08001e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <HAL_I2C_MspInit+0x70>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d123      	bne.n	8001e68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_I2C_MspInit+0x74>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <HAL_I2C_MspInit+0x74>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_I2C_MspInit+0x74>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e38:	23c0      	movs	r3, #192	; 0xc0
 8001e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <HAL_I2C_MspInit+0x78>)
 8001e4c:	f000 fab6 	bl	80023bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_I2C_MspInit+0x74>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_I2C_MspInit+0x74>)
 8001e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5a:	61d3      	str	r3, [r2, #28]
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_I2C_MspInit+0x74>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40005400 	.word	0x40005400
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010c00 	.word	0x40010c00

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d12f      	bne.n	8001efc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea6:	61d3      	str	r3, [r2, #28]
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <HAL_UART_MspInit+0x90>)
 8001ee0:	f000 fa6c 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_UART_MspInit+0x90>)
 8001ef8:	f000 fa60 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010800 	.word	0x40010800

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f56:	f000 f8b1 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 fbde 	bl	8002724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <_sbrk+0x5c>)
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <_sbrk+0x60>)
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <_sbrk+0x64>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <_sbrk+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f9c:	f002 fcb0 	bl	8004900 <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e009      	b.n	8001fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <_sbrk+0x64>)
 8001fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20005000 	.word	0x20005000
 8001fcc:	00000400 	.word	0x00000400
 8001fd0:	2000024c 	.word	0x2000024c
 8001fd4:	20000268 	.word	0x20000268

08001fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	; (8002028 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800200a:	f7ff ffe5 	bl	8001fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200e:	f002 fc7d 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002012:	f7ff fb0d 	bl	8001630 <main>
  bx lr
 8002016:	4770      	bx	lr
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002020:	080054c8 	.word	0x080054c8
  ldr r2, =_sbss
 8002024:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002028:	20000264 	.word	0x20000264

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_Init+0x28>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_Init+0x28>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 f96b 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	200f      	movs	r0, #15
 8002048:	f000 f808 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fea6 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f991 	bl	80023a2 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f94b 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000004 	.word	0x20000004
 80020b4:	2000000c 	.word	0x2000000c
 80020b8:	20000008 	.word	0x20000008

080020bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_IncTick+0x1c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_IncTick+0x20>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_IncTick+0x20>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	2000000c 	.word	0x2000000c
 80020dc:	20000250 	.word	0x20000250

080020e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <HAL_GetTick+0x10>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000250 	.word	0x20000250

080020f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_GetTick>
 8002100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d005      	beq.n	800211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_Delay+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211a:	bf00      	nop
 800211c:	f7ff ffe0 	bl	80020e0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f7      	bhi.n	800211c <HAL_Delay+0x28>
  {
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4906      	ldr	r1, [pc, #24]	; (80021d4 <__NVIC_EnableIRQ+0x34>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db12      	blt.n	8002210 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	490a      	ldr	r1, [pc, #40]	; (800221c <__NVIC_DisableIRQ+0x44>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	3320      	adds	r3, #32
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002204:	f3bf 8f4f 	dsb	sy
}
 8002208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800220a:	f3bf 8f6f 	isb	sy
}
 800220e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff90 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff09 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff1e 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff90 	bl	8002274 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5f 	bl	8002220 <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff11 	bl	80021a0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff1f 	bl	80021d8 <__NVIC_DisableIRQ>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff94 	bl	80022d8 <SysTick_Config>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b08b      	sub	sp, #44	; 0x2c
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	e169      	b.n	80026a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023d0:	2201      	movs	r2, #1
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	f040 8158 	bne.w	800269e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a9a      	ldr	r2, [pc, #616]	; (800265c <HAL_GPIO_Init+0x2a0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d05e      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 80023f8:	4a98      	ldr	r2, [pc, #608]	; (800265c <HAL_GPIO_Init+0x2a0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d875      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 80023fe:	4a98      	ldr	r2, [pc, #608]	; (8002660 <HAL_GPIO_Init+0x2a4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d058      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 8002404:	4a96      	ldr	r2, [pc, #600]	; (8002660 <HAL_GPIO_Init+0x2a4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d86f      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 800240a:	4a96      	ldr	r2, [pc, #600]	; (8002664 <HAL_GPIO_Init+0x2a8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d052      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 8002410:	4a94      	ldr	r2, [pc, #592]	; (8002664 <HAL_GPIO_Init+0x2a8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d869      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 8002416:	4a94      	ldr	r2, [pc, #592]	; (8002668 <HAL_GPIO_Init+0x2ac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d04c      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 800241c:	4a92      	ldr	r2, [pc, #584]	; (8002668 <HAL_GPIO_Init+0x2ac>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d863      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 8002422:	4a92      	ldr	r2, [pc, #584]	; (800266c <HAL_GPIO_Init+0x2b0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d046      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
 8002428:	4a90      	ldr	r2, [pc, #576]	; (800266c <HAL_GPIO_Init+0x2b0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d85d      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 800242e:	2b12      	cmp	r3, #18
 8002430:	d82a      	bhi.n	8002488 <HAL_GPIO_Init+0xcc>
 8002432:	2b12      	cmp	r3, #18
 8002434:	d859      	bhi.n	80024ea <HAL_GPIO_Init+0x12e>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <HAL_GPIO_Init+0x80>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	080024b7 	.word	0x080024b7
 8002440:	08002491 	.word	0x08002491
 8002444:	080024a3 	.word	0x080024a3
 8002448:	080024e5 	.word	0x080024e5
 800244c:	080024eb 	.word	0x080024eb
 8002450:	080024eb 	.word	0x080024eb
 8002454:	080024eb 	.word	0x080024eb
 8002458:	080024eb 	.word	0x080024eb
 800245c:	080024eb 	.word	0x080024eb
 8002460:	080024eb 	.word	0x080024eb
 8002464:	080024eb 	.word	0x080024eb
 8002468:	080024eb 	.word	0x080024eb
 800246c:	080024eb 	.word	0x080024eb
 8002470:	080024eb 	.word	0x080024eb
 8002474:	080024eb 	.word	0x080024eb
 8002478:	080024eb 	.word	0x080024eb
 800247c:	080024eb 	.word	0x080024eb
 8002480:	08002499 	.word	0x08002499
 8002484:	080024ad 	.word	0x080024ad
 8002488:	4a79      	ldr	r2, [pc, #484]	; (8002670 <HAL_GPIO_Init+0x2b4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800248e:	e02c      	b.n	80024ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e029      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	3304      	adds	r3, #4
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e024      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	3308      	adds	r3, #8
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e01f      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	330c      	adds	r3, #12
 80024b2:	623b      	str	r3, [r7, #32]
          break;
 80024b4:	e01a      	b.n	80024ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024be:	2304      	movs	r3, #4
 80024c0:	623b      	str	r3, [r7, #32]
          break;
 80024c2:	e013      	b.n	80024ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024cc:	2308      	movs	r3, #8
 80024ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	611a      	str	r2, [r3, #16]
          break;
 80024d6:	e009      	b.n	80024ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d8:	2308      	movs	r3, #8
 80024da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	615a      	str	r2, [r3, #20]
          break;
 80024e2:	e003      	b.n	80024ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
          break;
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x130>
          break;
 80024ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2bff      	cmp	r3, #255	; 0xff
 80024f0:	d801      	bhi.n	80024f6 <HAL_GPIO_Init+0x13a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	e001      	b.n	80024fa <HAL_GPIO_Init+0x13e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3304      	adds	r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2bff      	cmp	r3, #255	; 0xff
 8002500:	d802      	bhi.n	8002508 <HAL_GPIO_Init+0x14c>
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x152>
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	3b08      	subs	r3, #8
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	210f      	movs	r1, #15
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	6a39      	ldr	r1, [r7, #32]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	431a      	orrs	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80b1 	beq.w	800269e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_GPIO_Init+0x2b8>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_GPIO_Init+0x2b8>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_GPIO_Init+0x2b8>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002554:	4a48      	ldr	r2, [pc, #288]	; (8002678 <HAL_GPIO_Init+0x2bc>)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_GPIO_Init+0x2c0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x1ec>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3f      	ldr	r2, [pc, #252]	; (8002680 <HAL_GPIO_Init+0x2c4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1e8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3e      	ldr	r2, [pc, #248]	; (8002684 <HAL_GPIO_Init+0x2c8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1e4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <HAL_GPIO_Init+0x2cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1e0>
 8002598:	2303      	movs	r3, #3
 800259a:	e006      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 800259c:	2304      	movs	r3, #4
 800259e:	e004      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_Init+0x1ee>
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ba:	492f      	ldr	r1, [pc, #188]	; (8002678 <HAL_GPIO_Init+0x2bc>)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_GPIO_Init+0x2d0>)
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	492c      	ldr	r1, [pc, #176]	; (800268c <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_GPIO_Init+0x2d0>)
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4928      	ldr	r1, [pc, #160]	; (800268c <HAL_GPIO_Init+0x2d0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_GPIO_Init+0x2d0>)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4922      	ldr	r1, [pc, #136]	; (800268c <HAL_GPIO_Init+0x2d0>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_GPIO_Init+0x2d0>)
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	43db      	mvns	r3, r3
 8002612:	491e      	ldr	r1, [pc, #120]	; (800268c <HAL_GPIO_Init+0x2d0>)
 8002614:	4013      	ands	r3, r2
 8002616:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_GPIO_Init+0x2d0>)
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4918      	ldr	r1, [pc, #96]	; (800268c <HAL_GPIO_Init+0x2d0>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_GPIO_Init+0x2d0>)
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	43db      	mvns	r3, r3
 800263a:	4914      	ldr	r1, [pc, #80]	; (800268c <HAL_GPIO_Init+0x2d0>)
 800263c:	4013      	ands	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d021      	beq.n	8002690 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_GPIO_Init+0x2d0>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_GPIO_Init+0x2d0>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e021      	b.n	800269e <HAL_GPIO_Init+0x2e2>
 800265a:	bf00      	nop
 800265c:	10320000 	.word	0x10320000
 8002660:	10310000 	.word	0x10310000
 8002664:	10220000 	.word	0x10220000
 8002668:	10210000 	.word	0x10210000
 800266c:	10120000 	.word	0x10120000
 8002670:	10110000 	.word	0x10110000
 8002674:	40021000 	.word	0x40021000
 8002678:	40010000 	.word	0x40010000
 800267c:	40010800 	.word	0x40010800
 8002680:	40010c00 	.word	0x40010c00
 8002684:	40011000 	.word	0x40011000
 8002688:	40011400 	.word	0x40011400
 800268c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	43db      	mvns	r3, r3
 8002698:	4909      	ldr	r1, [pc, #36]	; (80026c0 <HAL_GPIO_Init+0x304>)
 800269a:	4013      	ands	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	3301      	adds	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f47f ae8e 	bne.w	80023d0 <HAL_GPIO_Init+0x14>
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	372c      	adds	r7, #44	; 0x2c
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e001      	b.n	80026e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
 80026fe:	4613      	mov	r3, r2
 8002700:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002702:	787b      	ldrb	r3, [r7, #1]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800270e:	e003      	b.n	8002718 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002710:	887b      	ldrh	r3, [r7, #2]
 8002712:	041a      	lsls	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	611a      	str	r2, [r3, #16]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe ff62 	bl	800160c <HAL_GPIO_EXTI_Callback>
  }
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e12b      	b.n	80029be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fb40 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b8:	f001 fe88 	bl	80044cc <HAL_RCC_GetPCLK1Freq>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a81      	ldr	r2, [pc, #516]	; (80029c8 <HAL_I2C_Init+0x274>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d807      	bhi.n	80027d8 <HAL_I2C_Init+0x84>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_I2C_Init+0x278>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e006      	b.n	80027e6 <HAL_I2C_Init+0x92>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a7d      	ldr	r2, [pc, #500]	; (80029d0 <HAL_I2C_Init+0x27c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0e7      	b.n	80029be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a78      	ldr	r2, [pc, #480]	; (80029d4 <HAL_I2C_Init+0x280>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0c9b      	lsrs	r3, r3, #18
 80027f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a6a      	ldr	r2, [pc, #424]	; (80029c8 <HAL_I2C_Init+0x274>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d802      	bhi.n	8002828 <HAL_I2C_Init+0xd4>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	e009      	b.n	800283c <HAL_I2C_Init+0xe8>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	4a69      	ldr	r2, [pc, #420]	; (80029d8 <HAL_I2C_Init+0x284>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	3301      	adds	r3, #1
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800284e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	495c      	ldr	r1, [pc, #368]	; (80029c8 <HAL_I2C_Init+0x274>)
 8002858:	428b      	cmp	r3, r1
 800285a:	d819      	bhi.n	8002890 <HAL_I2C_Init+0x13c>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e59      	subs	r1, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fbb1 f3f3 	udiv	r3, r1, r3
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002870:	400b      	ands	r3, r1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_I2C_Init+0x138>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e59      	subs	r1, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fbb1 f3f3 	udiv	r3, r1, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288a:	e051      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 800288c:	2304      	movs	r3, #4
 800288e:	e04f      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d111      	bne.n	80028bc <HAL_I2C_Init+0x168>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1e58      	subs	r0, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e012      	b.n	80028e2 <HAL_I2C_Init+0x18e>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e58      	subs	r0, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	0099      	lsls	r1, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x196>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e022      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10e      	bne.n	8002910 <HAL_I2C_Init+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e58      	subs	r0, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	440b      	add	r3, r1
 8002900:	fbb0 f3f3 	udiv	r3, r0, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	e00f      	b.n	8002930 <HAL_I2C_Init+0x1dc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6809      	ldr	r1, [r1, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800295e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6911      	ldr	r1, [r2, #16]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	430b      	orrs	r3, r1
 8002972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	000186a0 	.word	0x000186a0
 80029cc:	001e847f 	.word	0x001e847f
 80029d0:	003d08ff 	.word	0x003d08ff
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	10624dd3 	.word	0x10624dd3

080029dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	460b      	mov	r3, r1
 80029ea:	817b      	strh	r3, [r7, #10]
 80029ec:	4613      	mov	r3, r2
 80029ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff fb76 	bl	80020e0 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	f040 80e0 	bne.w	8002bc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2319      	movs	r3, #25
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4970      	ldr	r1, [pc, #448]	; (8002bd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 ff5c 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0d3      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0x50>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d007      	beq.n	8002a52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2221      	movs	r2, #33	; 0x21
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fd30 	bl	8003500 <I2C_MasterRequestWrite>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e08d      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac0:	e066      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f001 f81a 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06b      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d11b      	bne.n	8002b64 <HAL_I2C_Master_Transmit+0x188>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	6a39      	ldr	r1, [r7, #32]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f001 f811 	bl	8003b90 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00d      	beq.n	8002b90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d107      	bne.n	8002b8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e01a      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d194      	bne.n	8002ac2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00100002 	.word	0x00100002
 8002bd4:	ffff0000 	.word	0xffff0000

08002bd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	461a      	mov	r2, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	817b      	strh	r3, [r7, #10]
 8002be8:	4613      	mov	r3, r2
 8002bea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff fa76 	bl	80020e0 <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	f040 824b 	bne.w	800309a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2319      	movs	r3, #25
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	497f      	ldr	r1, [pc, #508]	; (8002e0c <HAL_I2C_Master_Receive+0x234>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fe5c 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e23e      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Receive+0x54>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e237      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d007      	beq.n	8002c52 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2222      	movs	r2, #34	; 0x22
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a5f      	ldr	r2, [pc, #380]	; (8002e10 <HAL_I2C_Master_Receive+0x238>)
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fcb2 	bl	8003604 <I2C_MasterRequestRead>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1f8      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d113      	bne.n	8002cda <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e1cc      	b.n	8003074 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d11e      	bne.n	8002d20 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf2:	b672      	cpsid	i
}
 8002cf4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d1c:	b662      	cpsie	i
}
 8002d1e:	e035      	b.n	8002d8c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d11e      	bne.n	8002d66 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d38:	b672      	cpsid	i
}
 8002d3a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d62:	b662      	cpsie	i
}
 8002d64:	e012      	b.n	8002d8c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d8c:	e172      	b.n	8003074 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	f200 811f 	bhi.w	8002fd6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d123      	bne.n	8002de8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 ff3b 	bl	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e173      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002de6:	e145      	b.n	8003074 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d152      	bne.n	8002e96 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	2200      	movs	r2, #0
 8002df8:	4906      	ldr	r1, [pc, #24]	; (8002e14 <HAL_I2C_Master_Receive+0x23c>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fd66 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e148      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
 8002e0a:	bf00      	nop
 8002e0c:	00100002 	.word	0x00100002
 8002e10:	ffff0000 	.word	0xffff0000
 8002e14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
}
 8002e1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5e:	b662      	cpsie	i
}
 8002e60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e94:	e0ee      	b.n	8003074 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4981      	ldr	r1, [pc, #516]	; (80030a4 <HAL_I2C_Master_Receive+0x4cc>)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fd13 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0f5      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec0:	b672      	cpsid	i
}
 8002ec2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ef6:	4b6c      	ldr	r3, [pc, #432]	; (80030a8 <HAL_I2C_Master_Receive+0x4d0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	08db      	lsrs	r3, r3, #3
 8002efc:	4a6b      	ldr	r2, [pc, #428]	; (80030ac <HAL_I2C_Master_Receive+0x4d4>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0a1a      	lsrs	r2, r3, #8
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00da      	lsls	r2, r3, #3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d118      	bne.n	8002f4e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3e:	b662      	cpsie	i
}
 8002f40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0a6      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d1d9      	bne.n	8002f10 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f9e:	b662      	cpsie	i
}
 8002fa0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd4:	e04e      	b.n	8003074 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fe20 	bl	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e058      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d124      	bne.n	8003074 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b03      	cmp	r3, #3
 8003030:	d107      	bne.n	8003042 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003040:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f ae88 	bne.w	8002d8e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3728      	adds	r7, #40	; 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	00010004 	.word	0x00010004
 80030a8:	20000004 	.word	0x20000004
 80030ac:	14f8b589 	.word	0x14f8b589

080030b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ca:	f7ff f809 	bl	80020e0 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	f040 80d9 	bne.w	8003290 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2319      	movs	r3, #25
 80030e4:	2201      	movs	r2, #1
 80030e6:	496d      	ldr	r1, [pc, #436]	; (800329c <HAL_I2C_Mem_Write+0x1ec>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fbef 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0cc      	b.n	8003292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Mem_Write+0x56>
 8003102:	2302      	movs	r3, #2
 8003104:	e0c5      	b.n	8003292 <HAL_I2C_Mem_Write+0x1e2>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d007      	beq.n	800312c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2221      	movs	r2, #33	; 0x21
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <HAL_I2C_Mem_Write+0x1f0>)
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316e:	88f8      	ldrh	r0, [r7, #6]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fb0e 	bl	80037a0 <I2C_RequestMemoryWrite>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d052      	beq.n	8003230 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e081      	b.n	8003292 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fcb4 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d107      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e06b      	b.n	8003292 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d11b      	bne.n	8003230 <HAL_I2C_Mem_Write+0x180>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d017      	beq.n	8003230 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1aa      	bne.n	800318e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fca7 	bl	8003b90 <I2C_WaitOnBTFFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e016      	b.n	8003292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	00100002 	.word	0x00100002
 80032a0:	ffff0000 	.word	0xffff0000

080032a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	460b      	mov	r3, r1
 80032b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7fe ff14 	bl	80020e0 <HAL_GetTick>
 80032b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	f040 8111 	bne.w	80034ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	4988      	ldr	r1, [pc, #544]	; (80034f8 <HAL_I2C_IsDeviceReady+0x254>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 faf8 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	e104      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_IsDeviceReady+0x50>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0fd      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d007      	beq.n	800331a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2224      	movs	r2, #36	; 0x24
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a70      	ldr	r2, [pc, #448]	; (80034fc <HAL_I2C_IsDeviceReady+0x258>)
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fab6 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	d103      	bne.n	800337e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b6      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003390:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003392:	f7fe fea5 	bl	80020e0 <HAL_GetTick>
 8003396:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033c6:	e025      	b.n	8003414 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fe fe8a 	bl	80020e0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <HAL_I2C_IsDeviceReady+0x13a>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	22a0      	movs	r2, #160	; 0xa0
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2ba0      	cmp	r3, #160	; 0xa0
 800341e:	d005      	beq.n	800342c <HAL_I2C_IsDeviceReady+0x188>
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_I2C_IsDeviceReady+0x188>
 8003426:	7dbb      	ldrb	r3, [r7, #22]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0cd      	beq.n	80033c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d129      	bne.n	8003496 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2319      	movs	r3, #25
 800346e:	2201      	movs	r2, #1
 8003470:	4921      	ldr	r1, [pc, #132]	; (80034f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa2a 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e036      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e02c      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2319      	movs	r3, #25
 80034b6:	2201      	movs	r2, #1
 80034b8:	490f      	ldr	r1, [pc, #60]	; (80034f8 <HAL_I2C_IsDeviceReady+0x254>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fa06 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e012      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f4ff af32 	bcc.w	800333e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	00100002 	.word	0x00100002
 80034fc:	ffff0000 	.word	0xffff0000

08003500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d006      	beq.n	800352a <I2C_MasterRequestWrite+0x2a>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d003      	beq.n	800352a <I2C_MasterRequestWrite+0x2a>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003528:	d108      	bne.n	800353c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e00b      	b.n	8003554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	2b12      	cmp	r3, #18
 8003542:	d107      	bne.n	8003554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f9b3 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d103      	bne.n	8003584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e035      	b.n	80035f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d108      	bne.n	80035a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	e01b      	b.n	80035dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	11db      	asrs	r3, r3, #7
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0306 	and.w	r3, r3, #6
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f063 030f 	orn	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <I2C_MasterRequestWrite+0xfc>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f9fc 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e010      	b.n	80035f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d2:	897b      	ldrh	r3, [r7, #10]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <I2C_MasterRequestWrite+0x100>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f9ec 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	00010008 	.word	0x00010008
 8003600:	00010002 	.word	0x00010002

08003604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	460b      	mov	r3, r1
 8003612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d006      	beq.n	800363e <I2C_MasterRequestRead+0x3a>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d003      	beq.n	800363e <I2C_MasterRequestRead+0x3a>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800363c:	d108      	bne.n	8003650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e00b      	b.n	8003668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b11      	cmp	r3, #17
 8003656:	d107      	bne.n	8003668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f929 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d103      	bne.n	8003698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e079      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d108      	bne.n	80036b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	e05f      	b.n	8003778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	11db      	asrs	r3, r3, #7
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0306 	and.w	r3, r3, #6
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f063 030f 	orn	r3, r3, #15
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4930      	ldr	r1, [pc, #192]	; (8003798 <I2C_MasterRequestRead+0x194>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f972 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e054      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4929      	ldr	r1, [pc, #164]	; (800379c <I2C_MasterRequestRead+0x198>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f962 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e044      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f8c7 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d103      	bne.n	800375c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e017      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	11db      	asrs	r3, r3, #7
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f063 030e 	orn	r3, r3, #14
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4907      	ldr	r1, [pc, #28]	; (800379c <I2C_MasterRequestRead+0x198>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f91e 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	00010008 	.word	0x00010008
 800379c:	00010002 	.word	0x00010002

080037a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f878 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d103      	bne.n	80037fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e05f      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	492d      	ldr	r1, [pc, #180]	; (80038c8 <I2C_RequestMemoryWrite+0x128>)
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f8d3 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e04c      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f95e 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b04      	cmp	r3, #4
 8003850:	d107      	bne.n	8003862 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e02b      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]
 8003876:	e021      	b.n	80038bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003878:	893b      	ldrh	r3, [r7, #8]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29b      	uxth	r3, r3
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f938 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e005      	b.n	80038be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b2:	893b      	ldrh	r3, [r7, #8]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	00010002 	.word	0x00010002

080038cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038dc:	e048      	b.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d044      	beq.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fbfb 	bl	80020e0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d139      	bne.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10d      	bne.n	8003922 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	43da      	mvns	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	e00c      	b.n	800393c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	43da      	mvns	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	429a      	cmp	r2, r3
 8003940:	d116      	bne.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e023      	b.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0xca>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	e00c      	b.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d093      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ce:	e071      	b.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039de:	d123      	bne.n	8003a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e067      	b.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d041      	beq.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fe fb56 	bl	80020e0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d136      	bne.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d10c      	bne.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e00b      	b.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e021      	b.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10c      	bne.n	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e00b      	b.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af6d 	bne.w	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0c:	e034      	b.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8e3 	bl	8003cda <I2C_IsAcknowledgeFailed>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e034      	b.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d028      	beq.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fe fadb 	bl	80020e0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11d      	bne.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d016      	beq.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e007      	b.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d1c3      	bne.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9c:	e034      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f89b 	bl	8003cda <I2C_IsAcknowledgeFailed>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e034      	b.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d028      	beq.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fe fa93 	bl	80020e0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11d      	bne.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d016      	beq.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e007      	b.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d1c3      	bne.n	8003b9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c2c:	e049      	b.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d119      	bne.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0210 	mvn.w	r2, #16
 8003c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e030      	b.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c70:	f7fe fa36 	bl	80020e0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11d      	bne.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d016      	beq.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e007      	b.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d1ae      	bne.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf0:	d11b      	bne.n	8003d2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f043 0204 	orr.w	r2, r3, #4
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e272      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8087 	beq.w	8003e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d58:	4b92      	ldr	r3, [pc, #584]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d00c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d64:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d112      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e>
 8003d70:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d10b      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06c      	beq.n	8003e64 <HAL_RCC_OscConfig+0x12c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d168      	bne.n	8003e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e24c      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x76>
 8003da0:	4b80      	ldr	r3, [pc, #512]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a7f      	ldr	r2, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	e02e      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b7b      	ldr	r3, [pc, #492]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7a      	ldr	r2, [pc, #488]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e01d      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0xbc>
 8003dda:	4b72      	ldr	r3, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a71      	ldr	r2, [pc, #452]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003df4:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fe f964 	bl	80020e0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fe f960 	bl	80020e0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e200      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0xe4>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe f950 	bl	80020e0 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fe f94c 	bl	80020e0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e1ec      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x10c>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d063      	beq.n	8003f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x18c>
 8003e8a:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d116      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x176>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1c0      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4939      	ldr	r1, [pc, #228]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	e03a      	b.n	8003f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe f905 	bl	80020e0 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eda:	f7fe f901 	bl	80020e0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1a1      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4927      	ldr	r1, [pc, #156]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0e:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fe f8e4 	bl	80020e0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7fe f8e0 	bl	80020e0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e180      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d03a      	beq.n	8003fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d019      	beq.n	8003f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	4b17      	ldr	r3, [pc, #92]	; (8003fac <HAL_RCC_OscConfig+0x274>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f54:	f7fe f8c4 	bl	80020e0 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5c:	f7fe f8c0 	bl	80020e0 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e160      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f000 face 	bl	800451c <RCC_Delay>
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_RCC_OscConfig+0x274>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fe f8aa 	bl	80020e0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8e:	e00f      	b.n	8003fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fe f8a6 	bl	80020e0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d908      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e146      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	42420000 	.word	0x42420000
 8003fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e9      	bne.n	8003f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a6 	beq.w	8004116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b8b      	ldr	r3, [pc, #556]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4a87      	ldr	r2, [pc, #540]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	61d3      	str	r3, [r2, #28]
 8003fe6:	4b85      	ldr	r3, [pc, #532]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d118      	bne.n	8004034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b7f      	ldr	r3, [pc, #508]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a7e      	ldr	r2, [pc, #504]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fe f867 	bl	80020e0 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fe f863 	bl	80020e0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b64      	cmp	r3, #100	; 0x64
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e103      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	4b75      	ldr	r3, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x312>
 800403c:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	e02d      	b.n	80040a6 <HAL_RCC_OscConfig+0x36e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x334>
 8004052:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6213      	str	r3, [r2, #32]
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4a66      	ldr	r2, [pc, #408]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6213      	str	r3, [r2, #32]
 800406a:	e01c      	b.n	80040a6 <HAL_RCC_OscConfig+0x36e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b05      	cmp	r3, #5
 8004072:	d10c      	bne.n	800408e <HAL_RCC_OscConfig+0x356>
 8004074:	4b61      	ldr	r3, [pc, #388]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a60      	ldr	r2, [pc, #384]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	e00b      	b.n	80040a6 <HAL_RCC_OscConfig+0x36e>
 800408e:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4a5a      	ldr	r2, [pc, #360]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	6213      	str	r3, [r2, #32]
 800409a:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d015      	beq.n	80040da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe f817 	bl	80020e0 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fe f813 	bl	80020e0 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0b1      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ee      	beq.n	80040b6 <HAL_RCC_OscConfig+0x37e>
 80040d8:	e014      	b.n	8004104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040da:	f7fe f801 	bl	80020e0 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fd fffd 	bl	80020e0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e09b      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ee      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8087 	beq.w	800422e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d061      	beq.n	80041f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d146      	bne.n	80041c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fd ffd1 	bl	80020e0 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fd ffcd 	bl	80020e0 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e06d      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d108      	bne.n	800417c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4921      	ldr	r1, [pc, #132]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417c:	4b1f      	ldr	r3, [pc, #124]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a19      	ldr	r1, [r3, #32]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	430b      	orrs	r3, r1
 800418e:	491b      	ldr	r1, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x4cc>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7fd ffa1 	bl	80020e0 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fd ff9d 	bl	80020e0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e03d      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x46a>
 80041c0:	e035      	b.n	800422e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fd ff8a 	bl	80020e0 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d0:	f7fd ff86 	bl	80020e0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e026      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x498>
 80041ee:	e01e      	b.n	800422e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e019      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
 80041fc:	40021000 	.word	0x40021000
 8004200:	40007000 	.word	0x40007000
 8004204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x500>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000

0800423c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0d0      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d910      	bls.n	8004280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 0207 	bic.w	r2, r3, #7
 8004266:	4965      	ldr	r1, [pc, #404]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0b8      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004298:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042bc:	4b50      	ldr	r3, [pc, #320]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d040      	beq.n	800435c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d115      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e073      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06b      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4936      	ldr	r1, [pc, #216]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800432c:	f7fd fed8 	bl	80020e0 <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7fd fed4 	bl	80020e0 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e053      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d210      	bcs.n	800438c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 0207 	bic.w	r2, r3, #7
 8004372:	4922      	ldr	r1, [pc, #136]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e032      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4916      	ldr	r1, [pc, #88]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ca:	f000 f821 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	5ccb      	ldrb	r3, [r1, r3]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1cc>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_ClockConfig+0x1d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fe36 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	08005458 	.word	0x08005458
 8004408:	20000004 	.word	0x20000004
 800440c:	20000008 	.word	0x20000008

08004410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800442a:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b04      	cmp	r3, #4
 8004438:	d002      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x30>
 800443a:	2b08      	cmp	r3, #8
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0x36>
 800443e:	e027      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004442:	613b      	str	r3, [r7, #16]
      break;
 8004444:	e027      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	0c9b      	lsrs	r3, r3, #18
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	4a17      	ldr	r2, [pc, #92]	; (80044ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	0c5b      	lsrs	r3, r3, #17
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e004      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0c      	ldr	r2, [pc, #48]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004484:	fb02 f303 	mul.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	613b      	str	r3, [r7, #16]
      break;
 800448e:	e002      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004492:	613b      	str	r3, [r7, #16]
      break;
 8004494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004496:	693b      	ldr	r3, [r7, #16]
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	007a1200 	.word	0x007a1200
 80044ac:	08005470 	.word	0x08005470
 80044b0:	08005480 	.word	0x08005480
 80044b4:	003d0900 	.word	0x003d0900

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d0:	f7ff fff2 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4903      	ldr	r1, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08005468 	.word	0x08005468

080044f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044f8:	f7ff ffde 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	0adb      	lsrs	r3, r3, #11
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4903      	ldr	r1, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	08005468 	.word	0x08005468

0800451c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <RCC_Delay+0x34>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <RCC_Delay+0x38>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a5b      	lsrs	r3, r3, #9
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004538:	bf00      	nop
  }
  while (Delay --);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	60fa      	str	r2, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f9      	bne.n	8004538 <RCC_Delay+0x1c>
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	20000004 	.word	0x20000004
 8004554:	10624dd3 	.word	0x10624dd3

08004558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e042      	b.n	80045f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd fc7c 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f91d 	bl	80047dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b20      	cmp	r3, #32
 8004616:	d16d      	bne.n	80046f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Transmit+0x2c>
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e066      	b.n	80046f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2221      	movs	r2, #33	; 0x21
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004636:	f7fd fd53 	bl	80020e0 <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d108      	bne.n	8004664 <HAL_UART_Transmit+0x6c>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e003      	b.n	800466c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800466c:	e02a      	b.n	80046c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f840 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e036      	b.n	80046f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800469c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	3302      	adds	r3, #2
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	e007      	b.n	80046b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1cf      	bne.n	800466e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2140      	movs	r1, #64	; 0x40
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f810 	bl	80046fe <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e006      	b.n	80046f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b090      	sub	sp, #64	; 0x40
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470e:	e050      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d04c      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <UART_WaitOnFlagUntilTimeout+0x30>
 800471e:	f7fd fcdf 	bl	80020e0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800472a:	429a      	cmp	r2, r3
 800472c:	d241      	bcs.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800474e:	637a      	str	r2, [r7, #52]	; 0x34
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e5      	bne.n	800472e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	613b      	str	r3, [r7, #16]
   return(result);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004782:	623a      	str	r2, [r7, #32]
 8004784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	69f9      	ldr	r1, [r7, #28]
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e00f      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d09f      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3740      	adds	r7, #64	; 0x40
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004816:	f023 030c 	bic.w	r3, r3, #12
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	430b      	orrs	r3, r1
 8004822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <UART_SetConfig+0x114>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d103      	bne.n	800484c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7ff fe56 	bl	80044f4 <HAL_RCC_GetPCLK2Freq>
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	e002      	b.n	8004852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800484c:	f7ff fe3e 	bl	80044cc <HAL_RCC_GetPCLK1Freq>
 8004850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009a      	lsls	r2, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <UART_SetConfig+0x118>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	0119      	lsls	r1, r3, #4
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	fbb2 f2f3 	udiv	r2, r2, r3
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <UART_SetConfig+0x118>)
 800488a:	fba3 0302 	umull	r0, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2064      	movs	r0, #100	; 0x64
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a8:	4419      	add	r1, r3
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <UART_SetConfig+0x118>)
 80048c2:	fba3 0302 	umull	r0, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2064      	movs	r0, #100	; 0x64
 80048ca:	fb00 f303 	mul.w	r3, r0, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	3332      	adds	r3, #50	; 0x32
 80048d4:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <UART_SetConfig+0x118>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	f003 020f 	and.w	r2, r3, #15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	440a      	add	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40013800 	.word	0x40013800
 80048f4:	51eb851f 	.word	0x51eb851f

080048f8 <_ZdlPvj>:
 80048f8:	f000 b800 	b.w	80048fc <_ZdlPv>

080048fc <_ZdlPv>:
 80048fc:	f000 b82a 	b.w	8004954 <free>

08004900 <__errno>:
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <__errno+0x8>)
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000010 	.word	0x20000010

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	2600      	movs	r6, #0
 8004910:	4d0c      	ldr	r5, [pc, #48]	; (8004944 <__libc_init_array+0x38>)
 8004912:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004914:	1b64      	subs	r4, r4, r5
 8004916:	10a4      	asrs	r4, r4, #2
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	f000 fca4 	bl	8005268 <_init>
 8004920:	2600      	movs	r6, #0
 8004922:	4d0a      	ldr	r5, [pc, #40]	; (800494c <__libc_init_array+0x40>)
 8004924:	4c0a      	ldr	r4, [pc, #40]	; (8004950 <__libc_init_array+0x44>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	080054b8 	.word	0x080054b8
 8004948:	080054b8 	.word	0x080054b8
 800494c:	080054b8 	.word	0x080054b8
 8004950:	080054c0 	.word	0x080054c0

08004954 <free>:
 8004954:	4b02      	ldr	r3, [pc, #8]	; (8004960 <free+0xc>)
 8004956:	4601      	mov	r1, r0
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	f000 b80b 	b.w	8004974 <_free_r>
 800495e:	bf00      	nop
 8004960:	20000010 	.word	0x20000010

08004964 <memset>:
 8004964:	4603      	mov	r3, r0
 8004966:	4402      	add	r2, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	d100      	bne.n	800496e <memset+0xa>
 800496c:	4770      	bx	lr
 800496e:	f803 1b01 	strb.w	r1, [r3], #1
 8004972:	e7f9      	b.n	8004968 <memset+0x4>

08004974 <_free_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4605      	mov	r5, r0
 8004978:	2900      	cmp	r1, #0
 800497a:	d040      	beq.n	80049fe <_free_r+0x8a>
 800497c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004980:	1f0c      	subs	r4, r1, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	bfb8      	it	lt
 8004986:	18e4      	addlt	r4, r4, r3
 8004988:	f000 f900 	bl	8004b8c <__malloc_lock>
 800498c:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <_free_r+0x8c>)
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	b933      	cbnz	r3, 80049a0 <_free_r+0x2c>
 8004992:	6063      	str	r3, [r4, #4]
 8004994:	6014      	str	r4, [r2, #0]
 8004996:	4628      	mov	r0, r5
 8004998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800499c:	f000 b8fc 	b.w	8004b98 <__malloc_unlock>
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	d908      	bls.n	80049b6 <_free_r+0x42>
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	1821      	adds	r1, r4, r0
 80049a8:	428b      	cmp	r3, r1
 80049aa:	bf01      	itttt	eq
 80049ac:	6819      	ldreq	r1, [r3, #0]
 80049ae:	685b      	ldreq	r3, [r3, #4]
 80049b0:	1809      	addeq	r1, r1, r0
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	e7ed      	b.n	8004992 <_free_r+0x1e>
 80049b6:	461a      	mov	r2, r3
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b10b      	cbz	r3, 80049c0 <_free_r+0x4c>
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d9fa      	bls.n	80049b6 <_free_r+0x42>
 80049c0:	6811      	ldr	r1, [r2, #0]
 80049c2:	1850      	adds	r0, r2, r1
 80049c4:	42a0      	cmp	r0, r4
 80049c6:	d10b      	bne.n	80049e0 <_free_r+0x6c>
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	4401      	add	r1, r0
 80049cc:	1850      	adds	r0, r2, r1
 80049ce:	4283      	cmp	r3, r0
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	d1e0      	bne.n	8004996 <_free_r+0x22>
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4401      	add	r1, r0
 80049da:	6011      	str	r1, [r2, #0]
 80049dc:	6053      	str	r3, [r2, #4]
 80049de:	e7da      	b.n	8004996 <_free_r+0x22>
 80049e0:	d902      	bls.n	80049e8 <_free_r+0x74>
 80049e2:	230c      	movs	r3, #12
 80049e4:	602b      	str	r3, [r5, #0]
 80049e6:	e7d6      	b.n	8004996 <_free_r+0x22>
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	1821      	adds	r1, r4, r0
 80049ec:	428b      	cmp	r3, r1
 80049ee:	bf01      	itttt	eq
 80049f0:	6819      	ldreq	r1, [r3, #0]
 80049f2:	685b      	ldreq	r3, [r3, #4]
 80049f4:	1809      	addeq	r1, r1, r0
 80049f6:	6021      	streq	r1, [r4, #0]
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6054      	str	r4, [r2, #4]
 80049fc:	e7cb      	b.n	8004996 <_free_r+0x22>
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20000254 	.word	0x20000254

08004a04 <sbrk_aligned>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4e0e      	ldr	r6, [pc, #56]	; (8004a40 <sbrk_aligned+0x3c>)
 8004a08:	460c      	mov	r4, r1
 8004a0a:	6831      	ldr	r1, [r6, #0]
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	b911      	cbnz	r1, 8004a16 <sbrk_aligned+0x12>
 8004a10:	f000 f88c 	bl	8004b2c <_sbrk_r>
 8004a14:	6030      	str	r0, [r6, #0]
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f000 f887 	bl	8004b2c <_sbrk_r>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	d00a      	beq.n	8004a38 <sbrk_aligned+0x34>
 8004a22:	1cc4      	adds	r4, r0, #3
 8004a24:	f024 0403 	bic.w	r4, r4, #3
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d007      	beq.n	8004a3c <sbrk_aligned+0x38>
 8004a2c:	1a21      	subs	r1, r4, r0
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f87c 	bl	8004b2c <_sbrk_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d101      	bne.n	8004a3c <sbrk_aligned+0x38>
 8004a38:	f04f 34ff 	mov.w	r4, #4294967295
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	20000258 	.word	0x20000258

08004a44 <_malloc_r>:
 8004a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a48:	1ccd      	adds	r5, r1, #3
 8004a4a:	f025 0503 	bic.w	r5, r5, #3
 8004a4e:	3508      	adds	r5, #8
 8004a50:	2d0c      	cmp	r5, #12
 8004a52:	bf38      	it	cc
 8004a54:	250c      	movcc	r5, #12
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	4607      	mov	r7, r0
 8004a5a:	db01      	blt.n	8004a60 <_malloc_r+0x1c>
 8004a5c:	42a9      	cmp	r1, r5
 8004a5e:	d905      	bls.n	8004a6c <_malloc_r+0x28>
 8004a60:	230c      	movs	r3, #12
 8004a62:	2600      	movs	r6, #0
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	4630      	mov	r0, r6
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6c:	4e2e      	ldr	r6, [pc, #184]	; (8004b28 <_malloc_r+0xe4>)
 8004a6e:	f000 f88d 	bl	8004b8c <__malloc_lock>
 8004a72:	6833      	ldr	r3, [r6, #0]
 8004a74:	461c      	mov	r4, r3
 8004a76:	bb34      	cbnz	r4, 8004ac6 <_malloc_r+0x82>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ffc2 	bl	8004a04 <sbrk_aligned>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	4604      	mov	r4, r0
 8004a84:	d14d      	bne.n	8004b22 <_malloc_r+0xde>
 8004a86:	6834      	ldr	r4, [r6, #0]
 8004a88:	4626      	mov	r6, r4
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	d140      	bne.n	8004b10 <_malloc_r+0xcc>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	4631      	mov	r1, r6
 8004a92:	4638      	mov	r0, r7
 8004a94:	eb04 0803 	add.w	r8, r4, r3
 8004a98:	f000 f848 	bl	8004b2c <_sbrk_r>
 8004a9c:	4580      	cmp	r8, r0
 8004a9e:	d13a      	bne.n	8004b16 <_malloc_r+0xd2>
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	3503      	adds	r5, #3
 8004aa4:	1a6d      	subs	r5, r5, r1
 8004aa6:	f025 0503 	bic.w	r5, r5, #3
 8004aaa:	3508      	adds	r5, #8
 8004aac:	2d0c      	cmp	r5, #12
 8004aae:	bf38      	it	cc
 8004ab0:	250c      	movcc	r5, #12
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	f7ff ffa5 	bl	8004a04 <sbrk_aligned>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d02b      	beq.n	8004b16 <_malloc_r+0xd2>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	442b      	add	r3, r5
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	e00e      	b.n	8004ae4 <_malloc_r+0xa0>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	1b52      	subs	r2, r2, r5
 8004aca:	d41e      	bmi.n	8004b0a <_malloc_r+0xc6>
 8004acc:	2a0b      	cmp	r2, #11
 8004ace:	d916      	bls.n	8004afe <_malloc_r+0xba>
 8004ad0:	1961      	adds	r1, r4, r5
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	6025      	str	r5, [r4, #0]
 8004ad6:	bf18      	it	ne
 8004ad8:	6059      	strne	r1, [r3, #4]
 8004ada:	6863      	ldr	r3, [r4, #4]
 8004adc:	bf08      	it	eq
 8004ade:	6031      	streq	r1, [r6, #0]
 8004ae0:	5162      	str	r2, [r4, r5]
 8004ae2:	604b      	str	r3, [r1, #4]
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f104 060b 	add.w	r6, r4, #11
 8004aea:	f000 f855 	bl	8004b98 <__malloc_unlock>
 8004aee:	f026 0607 	bic.w	r6, r6, #7
 8004af2:	1d23      	adds	r3, r4, #4
 8004af4:	1af2      	subs	r2, r6, r3
 8004af6:	d0b6      	beq.n	8004a66 <_malloc_r+0x22>
 8004af8:	1b9b      	subs	r3, r3, r6
 8004afa:	50a3      	str	r3, [r4, r2]
 8004afc:	e7b3      	b.n	8004a66 <_malloc_r+0x22>
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	bf0c      	ite	eq
 8004b04:	6032      	streq	r2, [r6, #0]
 8004b06:	605a      	strne	r2, [r3, #4]
 8004b08:	e7ec      	b.n	8004ae4 <_malloc_r+0xa0>
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	6864      	ldr	r4, [r4, #4]
 8004b0e:	e7b2      	b.n	8004a76 <_malloc_r+0x32>
 8004b10:	4634      	mov	r4, r6
 8004b12:	6876      	ldr	r6, [r6, #4]
 8004b14:	e7b9      	b.n	8004a8a <_malloc_r+0x46>
 8004b16:	230c      	movs	r3, #12
 8004b18:	4638      	mov	r0, r7
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	f000 f83c 	bl	8004b98 <__malloc_unlock>
 8004b20:	e7a1      	b.n	8004a66 <_malloc_r+0x22>
 8004b22:	6025      	str	r5, [r4, #0]
 8004b24:	e7de      	b.n	8004ae4 <_malloc_r+0xa0>
 8004b26:	bf00      	nop
 8004b28:	20000254 	.word	0x20000254

08004b2c <_sbrk_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	2300      	movs	r3, #0
 8004b30:	4d05      	ldr	r5, [pc, #20]	; (8004b48 <_sbrk_r+0x1c>)
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fd fa18 	bl	8001f6c <_sbrk>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_sbrk_r+0x1a>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_sbrk_r+0x1a>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	2000025c 	.word	0x2000025c

08004b4c <siprintf>:
 8004b4c:	b40e      	push	{r1, r2, r3}
 8004b4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b52:	b500      	push	{lr}
 8004b54:	b09c      	sub	sp, #112	; 0x70
 8004b56:	ab1d      	add	r3, sp, #116	; 0x74
 8004b58:	9002      	str	r0, [sp, #8]
 8004b5a:	9006      	str	r0, [sp, #24]
 8004b5c:	9107      	str	r1, [sp, #28]
 8004b5e:	9104      	str	r1, [sp, #16]
 8004b60:	4808      	ldr	r0, [pc, #32]	; (8004b84 <siprintf+0x38>)
 8004b62:	4909      	ldr	r1, [pc, #36]	; (8004b88 <siprintf+0x3c>)
 8004b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b68:	9105      	str	r1, [sp, #20]
 8004b6a:	6800      	ldr	r0, [r0, #0]
 8004b6c:	a902      	add	r1, sp, #8
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f000 f874 	bl	8004c5c <_svfiprintf_r>
 8004b74:	2200      	movs	r2, #0
 8004b76:	9b02      	ldr	r3, [sp, #8]
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	b01c      	add	sp, #112	; 0x70
 8004b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b80:	b003      	add	sp, #12
 8004b82:	4770      	bx	lr
 8004b84:	20000010 	.word	0x20000010
 8004b88:	ffff0208 	.word	0xffff0208

08004b8c <__malloc_lock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__malloc_lock+0x8>)
 8004b8e:	f000 bafb 	b.w	8005188 <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000260 	.word	0x20000260

08004b98 <__malloc_unlock>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__malloc_unlock+0x8>)
 8004b9a:	f000 baf6 	b.w	800518a <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	20000260 	.word	0x20000260

08004ba4 <__ssputs_r>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	688e      	ldr	r6, [r1, #8]
 8004baa:	4682      	mov	sl, r0
 8004bac:	429e      	cmp	r6, r3
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4690      	mov	r8, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	d838      	bhi.n	8004c28 <__ssputs_r+0x84>
 8004bb6:	898a      	ldrh	r2, [r1, #12]
 8004bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bbc:	d032      	beq.n	8004c24 <__ssputs_r+0x80>
 8004bbe:	6825      	ldr	r5, [r4, #0]
 8004bc0:	6909      	ldr	r1, [r1, #16]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	eba5 0901 	sub.w	r9, r5, r1
 8004bc8:	6965      	ldr	r5, [r4, #20]
 8004bca:	444b      	add	r3, r9
 8004bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bd4:	106d      	asrs	r5, r5, #1
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	bf38      	it	cc
 8004bda:	461d      	movcc	r5, r3
 8004bdc:	0553      	lsls	r3, r2, #21
 8004bde:	d531      	bpl.n	8004c44 <__ssputs_r+0xa0>
 8004be0:	4629      	mov	r1, r5
 8004be2:	f7ff ff2f 	bl	8004a44 <_malloc_r>
 8004be6:	4606      	mov	r6, r0
 8004be8:	b950      	cbnz	r0, 8004c00 <__ssputs_r+0x5c>
 8004bea:	230c      	movs	r3, #12
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	f8ca 3000 	str.w	r3, [sl]
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	464a      	mov	r2, r9
 8004c02:	6921      	ldr	r1, [r4, #16]
 8004c04:	f000 fad0 	bl	80051a8 <memcpy>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	6126      	str	r6, [r4, #16]
 8004c16:	444e      	add	r6, r9
 8004c18:	6026      	str	r6, [r4, #0]
 8004c1a:	463e      	mov	r6, r7
 8004c1c:	6165      	str	r5, [r4, #20]
 8004c1e:	eba5 0509 	sub.w	r5, r5, r9
 8004c22:	60a5      	str	r5, [r4, #8]
 8004c24:	42be      	cmp	r6, r7
 8004c26:	d900      	bls.n	8004c2a <__ssputs_r+0x86>
 8004c28:	463e      	mov	r6, r7
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	f000 fac8 	bl	80051c4 <memmove>
 8004c34:	68a3      	ldr	r3, [r4, #8]
 8004c36:	2000      	movs	r0, #0
 8004c38:	1b9b      	subs	r3, r3, r6
 8004c3a:	60a3      	str	r3, [r4, #8]
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	4433      	add	r3, r6
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	e7db      	b.n	8004bfc <__ssputs_r+0x58>
 8004c44:	462a      	mov	r2, r5
 8004c46:	f000 fad7 	bl	80051f8 <_realloc_r>
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d1e1      	bne.n	8004c14 <__ssputs_r+0x70>
 8004c50:	4650      	mov	r0, sl
 8004c52:	6921      	ldr	r1, [r4, #16]
 8004c54:	f7ff fe8e 	bl	8004974 <_free_r>
 8004c58:	e7c7      	b.n	8004bea <__ssputs_r+0x46>
	...

08004c5c <_svfiprintf_r>:
 8004c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c60:	4698      	mov	r8, r3
 8004c62:	898b      	ldrh	r3, [r1, #12]
 8004c64:	4607      	mov	r7, r0
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	460d      	mov	r5, r1
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	b09d      	sub	sp, #116	; 0x74
 8004c6e:	d50e      	bpl.n	8004c8e <_svfiprintf_r+0x32>
 8004c70:	690b      	ldr	r3, [r1, #16]
 8004c72:	b963      	cbnz	r3, 8004c8e <_svfiprintf_r+0x32>
 8004c74:	2140      	movs	r1, #64	; 0x40
 8004c76:	f7ff fee5 	bl	8004a44 <_malloc_r>
 8004c7a:	6028      	str	r0, [r5, #0]
 8004c7c:	6128      	str	r0, [r5, #16]
 8004c7e:	b920      	cbnz	r0, 8004c8a <_svfiprintf_r+0x2e>
 8004c80:	230c      	movs	r3, #12
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	e0d1      	b.n	8004e2e <_svfiprintf_r+0x1d2>
 8004c8a:	2340      	movs	r3, #64	; 0x40
 8004c8c:	616b      	str	r3, [r5, #20]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9309      	str	r3, [sp, #36]	; 0x24
 8004c92:	2320      	movs	r3, #32
 8004c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c98:	2330      	movs	r3, #48	; 0x30
 8004c9a:	f04f 0901 	mov.w	r9, #1
 8004c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e48 <_svfiprintf_r+0x1ec>
 8004ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004caa:	4623      	mov	r3, r4
 8004cac:	469a      	mov	sl, r3
 8004cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb2:	b10a      	cbz	r2, 8004cb8 <_svfiprintf_r+0x5c>
 8004cb4:	2a25      	cmp	r2, #37	; 0x25
 8004cb6:	d1f9      	bne.n	8004cac <_svfiprintf_r+0x50>
 8004cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cbc:	d00b      	beq.n	8004cd6 <_svfiprintf_r+0x7a>
 8004cbe:	465b      	mov	r3, fp
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f7ff ff6d 	bl	8004ba4 <__ssputs_r>
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f000 80aa 	beq.w	8004e24 <_svfiprintf_r+0x1c8>
 8004cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cd2:	445a      	add	r2, fp
 8004cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8004cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80a2 	beq.w	8004e24 <_svfiprintf_r+0x1c8>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cea:	f10a 0a01 	add.w	sl, sl, #1
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	9307      	str	r3, [sp, #28]
 8004cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8004cf8:	4654      	mov	r4, sl
 8004cfa:	2205      	movs	r2, #5
 8004cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d00:	4851      	ldr	r0, [pc, #324]	; (8004e48 <_svfiprintf_r+0x1ec>)
 8004d02:	f000 fa43 	bl	800518c <memchr>
 8004d06:	9a04      	ldr	r2, [sp, #16]
 8004d08:	b9d8      	cbnz	r0, 8004d42 <_svfiprintf_r+0xe6>
 8004d0a:	06d0      	lsls	r0, r2, #27
 8004d0c:	bf44      	itt	mi
 8004d0e:	2320      	movmi	r3, #32
 8004d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d14:	0711      	lsls	r1, r2, #28
 8004d16:	bf44      	itt	mi
 8004d18:	232b      	movmi	r3, #43	; 0x2b
 8004d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d22:	2b2a      	cmp	r3, #42	; 0x2a
 8004d24:	d015      	beq.n	8004d52 <_svfiprintf_r+0xf6>
 8004d26:	4654      	mov	r4, sl
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f04f 0c0a 	mov.w	ip, #10
 8004d2e:	9a07      	ldr	r2, [sp, #28]
 8004d30:	4621      	mov	r1, r4
 8004d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d36:	3b30      	subs	r3, #48	; 0x30
 8004d38:	2b09      	cmp	r3, #9
 8004d3a:	d94e      	bls.n	8004dda <_svfiprintf_r+0x17e>
 8004d3c:	b1b0      	cbz	r0, 8004d6c <_svfiprintf_r+0x110>
 8004d3e:	9207      	str	r2, [sp, #28]
 8004d40:	e014      	b.n	8004d6c <_svfiprintf_r+0x110>
 8004d42:	eba0 0308 	sub.w	r3, r0, r8
 8004d46:	fa09 f303 	lsl.w	r3, r9, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	46a2      	mov	sl, r4
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	e7d2      	b.n	8004cf8 <_svfiprintf_r+0x9c>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	1d19      	adds	r1, r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	9103      	str	r1, [sp, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bfbb      	ittet	lt
 8004d5e:	425b      	neglt	r3, r3
 8004d60:	f042 0202 	orrlt.w	r2, r2, #2
 8004d64:	9307      	strge	r3, [sp, #28]
 8004d66:	9307      	strlt	r3, [sp, #28]
 8004d68:	bfb8      	it	lt
 8004d6a:	9204      	strlt	r2, [sp, #16]
 8004d6c:	7823      	ldrb	r3, [r4, #0]
 8004d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d70:	d10c      	bne.n	8004d8c <_svfiprintf_r+0x130>
 8004d72:	7863      	ldrb	r3, [r4, #1]
 8004d74:	2b2a      	cmp	r3, #42	; 0x2a
 8004d76:	d135      	bne.n	8004de4 <_svfiprintf_r+0x188>
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	3402      	adds	r4, #2
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9203      	str	r2, [sp, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfb8      	it	lt
 8004d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d8a:	9305      	str	r3, [sp, #20]
 8004d8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004e4c <_svfiprintf_r+0x1f0>
 8004d90:	2203      	movs	r2, #3
 8004d92:	4650      	mov	r0, sl
 8004d94:	7821      	ldrb	r1, [r4, #0]
 8004d96:	f000 f9f9 	bl	800518c <memchr>
 8004d9a:	b140      	cbz	r0, 8004dae <_svfiprintf_r+0x152>
 8004d9c:	2340      	movs	r3, #64	; 0x40
 8004d9e:	eba0 000a 	sub.w	r0, r0, sl
 8004da2:	fa03 f000 	lsl.w	r0, r3, r0
 8004da6:	9b04      	ldr	r3, [sp, #16]
 8004da8:	3401      	adds	r4, #1
 8004daa:	4303      	orrs	r3, r0
 8004dac:	9304      	str	r3, [sp, #16]
 8004dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db2:	2206      	movs	r2, #6
 8004db4:	4826      	ldr	r0, [pc, #152]	; (8004e50 <_svfiprintf_r+0x1f4>)
 8004db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dba:	f000 f9e7 	bl	800518c <memchr>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d038      	beq.n	8004e34 <_svfiprintf_r+0x1d8>
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <_svfiprintf_r+0x1f8>)
 8004dc4:	bb1b      	cbnz	r3, 8004e0e <_svfiprintf_r+0x1b2>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	3307      	adds	r3, #7
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	3308      	adds	r3, #8
 8004dd0:	9303      	str	r3, [sp, #12]
 8004dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd4:	4433      	add	r3, r6
 8004dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd8:	e767      	b.n	8004caa <_svfiprintf_r+0x4e>
 8004dda:	460c      	mov	r4, r1
 8004ddc:	2001      	movs	r0, #1
 8004dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004de2:	e7a5      	b.n	8004d30 <_svfiprintf_r+0xd4>
 8004de4:	2300      	movs	r3, #0
 8004de6:	f04f 0c0a 	mov.w	ip, #10
 8004dea:	4619      	mov	r1, r3
 8004dec:	3401      	adds	r4, #1
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	4620      	mov	r0, r4
 8004df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df6:	3a30      	subs	r2, #48	; 0x30
 8004df8:	2a09      	cmp	r2, #9
 8004dfa:	d903      	bls.n	8004e04 <_svfiprintf_r+0x1a8>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0c5      	beq.n	8004d8c <_svfiprintf_r+0x130>
 8004e00:	9105      	str	r1, [sp, #20]
 8004e02:	e7c3      	b.n	8004d8c <_svfiprintf_r+0x130>
 8004e04:	4604      	mov	r4, r0
 8004e06:	2301      	movs	r3, #1
 8004e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e0c:	e7f0      	b.n	8004df0 <_svfiprintf_r+0x194>
 8004e0e:	ab03      	add	r3, sp, #12
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	462a      	mov	r2, r5
 8004e14:	4638      	mov	r0, r7
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <_svfiprintf_r+0x1fc>)
 8004e18:	a904      	add	r1, sp, #16
 8004e1a:	f3af 8000 	nop.w
 8004e1e:	1c42      	adds	r2, r0, #1
 8004e20:	4606      	mov	r6, r0
 8004e22:	d1d6      	bne.n	8004dd2 <_svfiprintf_r+0x176>
 8004e24:	89ab      	ldrh	r3, [r5, #12]
 8004e26:	065b      	lsls	r3, r3, #25
 8004e28:	f53f af2c 	bmi.w	8004c84 <_svfiprintf_r+0x28>
 8004e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e2e:	b01d      	add	sp, #116	; 0x74
 8004e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e34:	ab03      	add	r3, sp, #12
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	462a      	mov	r2, r5
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <_svfiprintf_r+0x1fc>)
 8004e3e:	a904      	add	r1, sp, #16
 8004e40:	f000 f87c 	bl	8004f3c <_printf_i>
 8004e44:	e7eb      	b.n	8004e1e <_svfiprintf_r+0x1c2>
 8004e46:	bf00      	nop
 8004e48:	08005482 	.word	0x08005482
 8004e4c:	08005488 	.word	0x08005488
 8004e50:	0800548c 	.word	0x0800548c
 8004e54:	00000000 	.word	0x00000000
 8004e58:	08004ba5 	.word	0x08004ba5

08004e5c <_printf_common>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	4616      	mov	r6, r2
 8004e62:	4699      	mov	r9, r3
 8004e64:	688a      	ldr	r2, [r1, #8]
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4607      	mov	r7, r0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bfb8      	it	lt
 8004e6e:	4613      	movlt	r3, r2
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e76:	460c      	mov	r4, r1
 8004e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e7c:	b10a      	cbz	r2, 8004e82 <_printf_common+0x26>
 8004e7e:	3301      	adds	r3, #1
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	0699      	lsls	r1, r3, #26
 8004e86:	bf42      	ittt	mi
 8004e88:	6833      	ldrmi	r3, [r6, #0]
 8004e8a:	3302      	addmi	r3, #2
 8004e8c:	6033      	strmi	r3, [r6, #0]
 8004e8e:	6825      	ldr	r5, [r4, #0]
 8004e90:	f015 0506 	ands.w	r5, r5, #6
 8004e94:	d106      	bne.n	8004ea4 <_printf_common+0x48>
 8004e96:	f104 0a19 	add.w	sl, r4, #25
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	6832      	ldr	r2, [r6, #0]
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dc28      	bgt.n	8004ef6 <_printf_common+0x9a>
 8004ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea8:	1e13      	subs	r3, r2, #0
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	bf18      	it	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	0692      	lsls	r2, r2, #26
 8004eb2:	d42d      	bmi.n	8004f10 <_printf_common+0xb4>
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d020      	beq.n	8004f04 <_printf_common+0xa8>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	68e5      	ldr	r5, [r4, #12]
 8004ec6:	f003 0306 	and.w	r3, r3, #6
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	bf18      	it	ne
 8004ece:	2500      	movne	r5, #0
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	f04f 0600 	mov.w	r6, #0
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	bf08      	it	eq
 8004eda:	1aad      	subeq	r5, r5, r2
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	bf08      	it	eq
 8004ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bfc4      	itt	gt
 8004ee8:	1a9b      	subgt	r3, r3, r2
 8004eea:	18ed      	addgt	r5, r5, r3
 8004eec:	341a      	adds	r4, #26
 8004eee:	42b5      	cmp	r5, r6
 8004ef0:	d11a      	bne.n	8004f28 <_printf_common+0xcc>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e008      	b.n	8004f08 <_printf_common+0xac>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4652      	mov	r2, sl
 8004efa:	4649      	mov	r1, r9
 8004efc:	4638      	mov	r0, r7
 8004efe:	47c0      	blx	r8
 8004f00:	3001      	adds	r0, #1
 8004f02:	d103      	bne.n	8004f0c <_printf_common+0xb0>
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	e7c4      	b.n	8004e9a <_printf_common+0x3e>
 8004f10:	2030      	movs	r0, #48	; 0x30
 8004f12:	18e1      	adds	r1, r4, r3
 8004f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f1e:	4422      	add	r2, r4
 8004f20:	3302      	adds	r3, #2
 8004f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f26:	e7c5      	b.n	8004eb4 <_printf_common+0x58>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	4638      	mov	r0, r7
 8004f30:	47c0      	blx	r8
 8004f32:	3001      	adds	r0, #1
 8004f34:	d0e6      	beq.n	8004f04 <_printf_common+0xa8>
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7d9      	b.n	8004eee <_printf_common+0x92>
	...

08004f3c <_printf_i>:
 8004f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	7e0f      	ldrb	r7, [r1, #24]
 8004f42:	4691      	mov	r9, r2
 8004f44:	2f78      	cmp	r7, #120	; 0x78
 8004f46:	4680      	mov	r8, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	469a      	mov	sl, r3
 8004f4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f52:	d807      	bhi.n	8004f64 <_printf_i+0x28>
 8004f54:	2f62      	cmp	r7, #98	; 0x62
 8004f56:	d80a      	bhi.n	8004f6e <_printf_i+0x32>
 8004f58:	2f00      	cmp	r7, #0
 8004f5a:	f000 80d9 	beq.w	8005110 <_printf_i+0x1d4>
 8004f5e:	2f58      	cmp	r7, #88	; 0x58
 8004f60:	f000 80a4 	beq.w	80050ac <_printf_i+0x170>
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f6c:	e03a      	b.n	8004fe4 <_printf_i+0xa8>
 8004f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f72:	2b15      	cmp	r3, #21
 8004f74:	d8f6      	bhi.n	8004f64 <_printf_i+0x28>
 8004f76:	a101      	add	r1, pc, #4	; (adr r1, 8004f7c <_printf_i+0x40>)
 8004f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fe9 	.word	0x08004fe9
 8004f84:	08004f65 	.word	0x08004f65
 8004f88:	08004f65 	.word	0x08004f65
 8004f8c:	08004f65 	.word	0x08004f65
 8004f90:	08004f65 	.word	0x08004f65
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	08004f65 	.word	0x08004f65
 8004f9c:	08004f65 	.word	0x08004f65
 8004fa0:	08004f65 	.word	0x08004f65
 8004fa4:	08004f65 	.word	0x08004f65
 8004fa8:	080050f7 	.word	0x080050f7
 8004fac:	08005019 	.word	0x08005019
 8004fb0:	080050d9 	.word	0x080050d9
 8004fb4:	08004f65 	.word	0x08004f65
 8004fb8:	08004f65 	.word	0x08004f65
 8004fbc:	08005119 	.word	0x08005119
 8004fc0:	08004f65 	.word	0x08004f65
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f65 	.word	0x08004f65
 8004fcc:	08004f65 	.word	0x08004f65
 8004fd0:	080050e1 	.word	0x080050e1
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	1d1a      	adds	r2, r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	602a      	str	r2, [r5, #0]
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0a4      	b.n	8005132 <_printf_i+0x1f6>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	6829      	ldr	r1, [r5, #0]
 8004fec:	0606      	lsls	r6, r0, #24
 8004fee:	f101 0304 	add.w	r3, r1, #4
 8004ff2:	d50a      	bpl.n	800500a <_printf_i+0xce>
 8004ff4:	680e      	ldr	r6, [r1, #0]
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	da03      	bge.n	8005004 <_printf_i+0xc8>
 8004ffc:	232d      	movs	r3, #45	; 0x2d
 8004ffe:	4276      	negs	r6, r6
 8005000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005004:	230a      	movs	r3, #10
 8005006:	485e      	ldr	r0, [pc, #376]	; (8005180 <_printf_i+0x244>)
 8005008:	e019      	b.n	800503e <_printf_i+0x102>
 800500a:	680e      	ldr	r6, [r1, #0]
 800500c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	bf18      	it	ne
 8005014:	b236      	sxthne	r6, r6
 8005016:	e7ef      	b.n	8004ff8 <_printf_i+0xbc>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	1d19      	adds	r1, r3, #4
 800501e:	6029      	str	r1, [r5, #0]
 8005020:	0601      	lsls	r1, r0, #24
 8005022:	d501      	bpl.n	8005028 <_printf_i+0xec>
 8005024:	681e      	ldr	r6, [r3, #0]
 8005026:	e002      	b.n	800502e <_printf_i+0xf2>
 8005028:	0646      	lsls	r6, r0, #25
 800502a:	d5fb      	bpl.n	8005024 <_printf_i+0xe8>
 800502c:	881e      	ldrh	r6, [r3, #0]
 800502e:	2f6f      	cmp	r7, #111	; 0x6f
 8005030:	bf0c      	ite	eq
 8005032:	2308      	moveq	r3, #8
 8005034:	230a      	movne	r3, #10
 8005036:	4852      	ldr	r0, [pc, #328]	; (8005180 <_printf_i+0x244>)
 8005038:	2100      	movs	r1, #0
 800503a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800503e:	6865      	ldr	r5, [r4, #4]
 8005040:	2d00      	cmp	r5, #0
 8005042:	bfa8      	it	ge
 8005044:	6821      	ldrge	r1, [r4, #0]
 8005046:	60a5      	str	r5, [r4, #8]
 8005048:	bfa4      	itt	ge
 800504a:	f021 0104 	bicge.w	r1, r1, #4
 800504e:	6021      	strge	r1, [r4, #0]
 8005050:	b90e      	cbnz	r6, 8005056 <_printf_i+0x11a>
 8005052:	2d00      	cmp	r5, #0
 8005054:	d04d      	beq.n	80050f2 <_printf_i+0x1b6>
 8005056:	4615      	mov	r5, r2
 8005058:	fbb6 f1f3 	udiv	r1, r6, r3
 800505c:	fb03 6711 	mls	r7, r3, r1, r6
 8005060:	5dc7      	ldrb	r7, [r0, r7]
 8005062:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005066:	4637      	mov	r7, r6
 8005068:	42bb      	cmp	r3, r7
 800506a:	460e      	mov	r6, r1
 800506c:	d9f4      	bls.n	8005058 <_printf_i+0x11c>
 800506e:	2b08      	cmp	r3, #8
 8005070:	d10b      	bne.n	800508a <_printf_i+0x14e>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	07de      	lsls	r6, r3, #31
 8005076:	d508      	bpl.n	800508a <_printf_i+0x14e>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	6861      	ldr	r1, [r4, #4]
 800507c:	4299      	cmp	r1, r3
 800507e:	bfde      	ittt	le
 8005080:	2330      	movle	r3, #48	; 0x30
 8005082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800508a:	1b52      	subs	r2, r2, r5
 800508c:	6122      	str	r2, [r4, #16]
 800508e:	464b      	mov	r3, r9
 8005090:	4621      	mov	r1, r4
 8005092:	4640      	mov	r0, r8
 8005094:	f8cd a000 	str.w	sl, [sp]
 8005098:	aa03      	add	r2, sp, #12
 800509a:	f7ff fedf 	bl	8004e5c <_printf_common>
 800509e:	3001      	adds	r0, #1
 80050a0:	d14c      	bne.n	800513c <_printf_i+0x200>
 80050a2:	f04f 30ff 	mov.w	r0, #4294967295
 80050a6:	b004      	add	sp, #16
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	4834      	ldr	r0, [pc, #208]	; (8005180 <_printf_i+0x244>)
 80050ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050b2:	6829      	ldr	r1, [r5, #0]
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80050ba:	6029      	str	r1, [r5, #0]
 80050bc:	061d      	lsls	r5, r3, #24
 80050be:	d514      	bpl.n	80050ea <_printf_i+0x1ae>
 80050c0:	07df      	lsls	r7, r3, #31
 80050c2:	bf44      	itt	mi
 80050c4:	f043 0320 	orrmi.w	r3, r3, #32
 80050c8:	6023      	strmi	r3, [r4, #0]
 80050ca:	b91e      	cbnz	r6, 80050d4 <_printf_i+0x198>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	f023 0320 	bic.w	r3, r3, #32
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	2310      	movs	r3, #16
 80050d6:	e7af      	b.n	8005038 <_printf_i+0xfc>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f043 0320 	orr.w	r3, r3, #32
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	2378      	movs	r3, #120	; 0x78
 80050e2:	4828      	ldr	r0, [pc, #160]	; (8005184 <_printf_i+0x248>)
 80050e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050e8:	e7e3      	b.n	80050b2 <_printf_i+0x176>
 80050ea:	0659      	lsls	r1, r3, #25
 80050ec:	bf48      	it	mi
 80050ee:	b2b6      	uxthmi	r6, r6
 80050f0:	e7e6      	b.n	80050c0 <_printf_i+0x184>
 80050f2:	4615      	mov	r5, r2
 80050f4:	e7bb      	b.n	800506e <_printf_i+0x132>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	6826      	ldr	r6, [r4, #0]
 80050fa:	1d18      	adds	r0, r3, #4
 80050fc:	6961      	ldr	r1, [r4, #20]
 80050fe:	6028      	str	r0, [r5, #0]
 8005100:	0635      	lsls	r5, r6, #24
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	d501      	bpl.n	800510a <_printf_i+0x1ce>
 8005106:	6019      	str	r1, [r3, #0]
 8005108:	e002      	b.n	8005110 <_printf_i+0x1d4>
 800510a:	0670      	lsls	r0, r6, #25
 800510c:	d5fb      	bpl.n	8005106 <_printf_i+0x1ca>
 800510e:	8019      	strh	r1, [r3, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	4615      	mov	r5, r2
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	e7ba      	b.n	800508e <_printf_i+0x152>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	2100      	movs	r1, #0
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	602a      	str	r2, [r5, #0]
 8005120:	681d      	ldr	r5, [r3, #0]
 8005122:	6862      	ldr	r2, [r4, #4]
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f831 	bl	800518c <memchr>
 800512a:	b108      	cbz	r0, 8005130 <_printf_i+0x1f4>
 800512c:	1b40      	subs	r0, r0, r5
 800512e:	6060      	str	r0, [r4, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	2300      	movs	r3, #0
 8005136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513a:	e7a8      	b.n	800508e <_printf_i+0x152>
 800513c:	462a      	mov	r2, r5
 800513e:	4649      	mov	r1, r9
 8005140:	4640      	mov	r0, r8
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	47d0      	blx	sl
 8005146:	3001      	adds	r0, #1
 8005148:	d0ab      	beq.n	80050a2 <_printf_i+0x166>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	079b      	lsls	r3, r3, #30
 800514e:	d413      	bmi.n	8005178 <_printf_i+0x23c>
 8005150:	68e0      	ldr	r0, [r4, #12]
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	4298      	cmp	r0, r3
 8005156:	bfb8      	it	lt
 8005158:	4618      	movlt	r0, r3
 800515a:	e7a4      	b.n	80050a6 <_printf_i+0x16a>
 800515c:	2301      	movs	r3, #1
 800515e:	4632      	mov	r2, r6
 8005160:	4649      	mov	r1, r9
 8005162:	4640      	mov	r0, r8
 8005164:	47d0      	blx	sl
 8005166:	3001      	adds	r0, #1
 8005168:	d09b      	beq.n	80050a2 <_printf_i+0x166>
 800516a:	3501      	adds	r5, #1
 800516c:	68e3      	ldr	r3, [r4, #12]
 800516e:	9903      	ldr	r1, [sp, #12]
 8005170:	1a5b      	subs	r3, r3, r1
 8005172:	42ab      	cmp	r3, r5
 8005174:	dcf2      	bgt.n	800515c <_printf_i+0x220>
 8005176:	e7eb      	b.n	8005150 <_printf_i+0x214>
 8005178:	2500      	movs	r5, #0
 800517a:	f104 0619 	add.w	r6, r4, #25
 800517e:	e7f5      	b.n	800516c <_printf_i+0x230>
 8005180:	08005493 	.word	0x08005493
 8005184:	080054a4 	.word	0x080054a4

08005188 <__retarget_lock_acquire_recursive>:
 8005188:	4770      	bx	lr

0800518a <__retarget_lock_release_recursive>:
 800518a:	4770      	bx	lr

0800518c <memchr>:
 800518c:	4603      	mov	r3, r0
 800518e:	b510      	push	{r4, lr}
 8005190:	b2c9      	uxtb	r1, r1
 8005192:	4402      	add	r2, r0
 8005194:	4293      	cmp	r3, r2
 8005196:	4618      	mov	r0, r3
 8005198:	d101      	bne.n	800519e <memchr+0x12>
 800519a:	2000      	movs	r0, #0
 800519c:	e003      	b.n	80051a6 <memchr+0x1a>
 800519e:	7804      	ldrb	r4, [r0, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	428c      	cmp	r4, r1
 80051a4:	d1f6      	bne.n	8005194 <memchr+0x8>
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <memcpy>:
 80051a8:	440a      	add	r2, r1
 80051aa:	4291      	cmp	r1, r2
 80051ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80051b0:	d100      	bne.n	80051b4 <memcpy+0xc>
 80051b2:	4770      	bx	lr
 80051b4:	b510      	push	{r4, lr}
 80051b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ba:	4291      	cmp	r1, r2
 80051bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c0:	d1f9      	bne.n	80051b6 <memcpy+0xe>
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <memmove>:
 80051c4:	4288      	cmp	r0, r1
 80051c6:	b510      	push	{r4, lr}
 80051c8:	eb01 0402 	add.w	r4, r1, r2
 80051cc:	d902      	bls.n	80051d4 <memmove+0x10>
 80051ce:	4284      	cmp	r4, r0
 80051d0:	4623      	mov	r3, r4
 80051d2:	d807      	bhi.n	80051e4 <memmove+0x20>
 80051d4:	1e43      	subs	r3, r0, #1
 80051d6:	42a1      	cmp	r1, r4
 80051d8:	d008      	beq.n	80051ec <memmove+0x28>
 80051da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051e2:	e7f8      	b.n	80051d6 <memmove+0x12>
 80051e4:	4601      	mov	r1, r0
 80051e6:	4402      	add	r2, r0
 80051e8:	428a      	cmp	r2, r1
 80051ea:	d100      	bne.n	80051ee <memmove+0x2a>
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051f6:	e7f7      	b.n	80051e8 <memmove+0x24>

080051f8 <_realloc_r>:
 80051f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fc:	4680      	mov	r8, r0
 80051fe:	4614      	mov	r4, r2
 8005200:	460e      	mov	r6, r1
 8005202:	b921      	cbnz	r1, 800520e <_realloc_r+0x16>
 8005204:	4611      	mov	r1, r2
 8005206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800520a:	f7ff bc1b 	b.w	8004a44 <_malloc_r>
 800520e:	b92a      	cbnz	r2, 800521c <_realloc_r+0x24>
 8005210:	f7ff fbb0 	bl	8004974 <_free_r>
 8005214:	4625      	mov	r5, r4
 8005216:	4628      	mov	r0, r5
 8005218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800521c:	f000 f81b 	bl	8005256 <_malloc_usable_size_r>
 8005220:	4284      	cmp	r4, r0
 8005222:	4607      	mov	r7, r0
 8005224:	d802      	bhi.n	800522c <_realloc_r+0x34>
 8005226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800522a:	d812      	bhi.n	8005252 <_realloc_r+0x5a>
 800522c:	4621      	mov	r1, r4
 800522e:	4640      	mov	r0, r8
 8005230:	f7ff fc08 	bl	8004a44 <_malloc_r>
 8005234:	4605      	mov	r5, r0
 8005236:	2800      	cmp	r0, #0
 8005238:	d0ed      	beq.n	8005216 <_realloc_r+0x1e>
 800523a:	42bc      	cmp	r4, r7
 800523c:	4622      	mov	r2, r4
 800523e:	4631      	mov	r1, r6
 8005240:	bf28      	it	cs
 8005242:	463a      	movcs	r2, r7
 8005244:	f7ff ffb0 	bl	80051a8 <memcpy>
 8005248:	4631      	mov	r1, r6
 800524a:	4640      	mov	r0, r8
 800524c:	f7ff fb92 	bl	8004974 <_free_r>
 8005250:	e7e1      	b.n	8005216 <_realloc_r+0x1e>
 8005252:	4635      	mov	r5, r6
 8005254:	e7df      	b.n	8005216 <_realloc_r+0x1e>

08005256 <_malloc_usable_size_r>:
 8005256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525a:	1f18      	subs	r0, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	bfbc      	itt	lt
 8005260:	580b      	ldrlt	r3, [r1, r0]
 8005262:	18c0      	addlt	r0, r0, r3
 8005264:	4770      	bx	lr
	...

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
